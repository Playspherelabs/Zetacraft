export const orderIds = (idA: string, idB: string): [string, string] => {
  return Number(idA) > Number(idB) ? [idB, idA] : [idA, idB];
};

export const getCraftApi = async (craft_id: string) => {
  console.log("getCraftApi");
  //url parameter craft_id
  const url = `/api/craft?craft_id=${craft_id}`;
  try {
    const response = await fetch(url, {
      headers: {
        "Content-Type": "application/json",
      },
      method: "GET",
    });
    const data = await response.json();
    console.log("api data", data);
    return data;
  } catch (error) {
    // TODO Handle response data
    console.error("Error:", error);
  }
};

export const postCraftApi = async (
  craft_id: string,
  emoji: string,
  label: string
) => {
  console.log("postCraftApi");
  console.log("craft_id", craft_id);
  const url = `/api/craft?craft_id=${craft_id}`;
  try {
    const response = await fetch(url, {
      headers: {
        "Content-Type": "application/json",
      },
      method: "POST",
      body: JSON.stringify({ craft_id, emoji, label }),
    });
    console.log(response);
  } catch (error) {
    // TODO Handle response data
    console.error("Error:", error);
  }
};

export const getRecipeApi = async (recipe_id: string) => {
  console.log("getRecipeApi");
  //url parameter recipe_id
  const url = `/api/recipe?recipe_id=${recipe_id}`;
  try {
    const response = await fetch(url, {
      headers: {
        "Content-Type": "application/json",
      },
      method: "GET",
    });
    const data = await response.json();
    console.log("api data", data);
    return data;
  } catch (error) {
    // TODO Handle response data
    console.error("Error:", error);
  }
};

export const postRecipeApi = async (recipe_id: string, craft_id: string) => {
  console.log("postRecipeApi");
  console.log("recipe_id", recipe_id);
  const url = `/api/recipe?recipe_id=${recipe_id}`;
  try {
    const response = await fetch(url, {
      headers: {
        "Content-Type": "application/json",
      },
      method: "POST",
      body: JSON.stringify({ recipe_id, craft_id }),
    });
    console.log(response);
  } catch (error) {
    // TODO Handle response data
    console.error("Error:", error);
  }
};
import { Node } from "reactflow";

export const defaultSideNodes: Node[] = [
  {
    id: "",
    type: "custom",
    data: { craft_id: "1", emoji: "🔨", label: "Hammer" },
    position: { x: 0, y: 0 },
  },
  {
    id: "2",
    type: "custom",
    data: { craft_id: "2", emoji: "🗿", label: "Stone" },
    position: { x: 0, y: 0 },
  },
  {
    id: "3",
    type: "custom",
    data: { craft_id: "3", emoji: "🌱", label: "Seed" },
    position: { x: 0, y: 0 },
  },
  {
    id: "4",
    type: "custom",
    data: { craft_id: "4", emoji: "🧡", label: "Soul" },
    position: { x: 0, y: 0 },
  },
  {
    id: "5",
    type: "custom",
    data: { craft_id: "5", emoji: "🌏", label: "Earth" },
    position: { x: 0, y: 0 },
  },
];

export const defaultNodeMap: { [key: string]: Node } = {
  "1": {
    id: "",
    type: "custom",
    data: { craft_id: "1", emoji: "🔨", label: "Hammer" },
    position: { x: 0, y: 0 },
  },
  "2": {
    id: "",
    type: "custom",
    data: { craft_id: "2", emoji: "🗿", label: "Stone" },
    position: { x: 0, y: 0 },
  },
  "3": {
    id: "",
    type: "custom",
    data: { craft_id: "3", emoji: "🌱", label: "Seed" },
    position: { x: 0, y: 0 },
  },
  "4": {
    id: "",
    type: "custom",
    data: { craft_id: "4", emoji: "🧡", label: "Soul" },
    position: { x: 0, y: 0 },
  },
  "5": {
    id: "",
    type: "custom",
    data: { craft_id: "5", emoji: "🌏", label: "Earth" },
    position: { x: 0, y: 0 },
  },
  "6": {
    id: "",
    type: "custom",
    data: { craft_id: "6", emoji: "🗡", label: "Sword" },
    position: { x: 0, y: 0 },
  },
  "7": {
    id: "",
    type: "custom",
    data: { craft_id: "7", emoji: "🗿", label: "Cobblestone" },
    position: { x: 0, y: 0 },
  },
  "8": {
    id: "",
    type: "custom",
    data: { craft_id: "8", emoji: "🌱", label: "Seed Oil" },
    position: { x: 0, y: 0 },
  },
  "9": {
    id: "",
    type: "custom",
    data: { craft_id: "9", emoji: "🦠", label: "Microbe" },
    position: { x: 0, y: 0 },
  },
  "10": {
    id: "",
    type: "custom",
    data: { craft_id: "10", emoji: "🏞", label: "Land" },
    position: { x: 0, y: 0 },
  },
  "11": {
    id: "",
    type: "custom",
    data: { craft_id: "11", emoji: "🗿", label: "Iron Ore" },
    position: { x: 0, y: 0 },
  },
  "12": {
    id: "",
    type: "custom",
    data: { craft_id: "12", emoji: "🗿", label: "Coal Ore" },
    position: { x: 0, y: 0 },
  },
  "13": {
    id: "",
    type: "custom",
    data: { craft_id: "13", emoji: "🗿", label: "Lapis Lazuli Ore" },
    position: { x: 0, y: 0 },
  },
  "14": {
    id: "",
    type: "custom",
    data: { craft_id: "14", emoji: "🗿", label: "Copper Ore" },
    position: { x: 0, y: 0 },
  },
  "15": {
    id: "",
    type: "custom",
    data: { craft_id: "15", emoji: "🌲", label: "Tree" },
    position: { x: 0, y: 0 },
  },
  "16": {
    id: "",
    type: "custom",
    data: { craft_id: "16", emoji: "🌾🍞", label: "Wheat" },
    position: { x: 0, y: 0 },
  },
  "17": {
    id: "",
    type: "custom",
    data: { craft_id: "17", emoji: "🥔", label: "Poteto" },
    position: { x: 0, y: 0 },
  },
  "18": {
    id: "",
    type: "custom",
    data: { craft_id: "18", emoji: "👶", label: "Baby" },
    position: { x: 0, y: 0 },
  },
  "19": {
    id: "",
    type: "custom",
    data: { craft_id: "19", emoji: "🐔", label: "Chicken" },
    position: { x: 0, y: 0 },
  },
  "20": {
    id: "",
    type: "custom",
    data: { craft_id: "20", emoji: "🌕", label: "Moon" },
    position: { x: 0, y: 0 },
  },
  "21": {
    id: "",
    type: "custom",
    data: { craft_id: "21", emoji: "🕯", label: "Candle" },
    position: { x: 0, y: 0 },
  },
  "22": {
    id: "",
    type: "custom",
    data: { craft_id: "22", emoji: "🛡️", label: "Shield" },
    position: { x: 0, y: 0 },
  },
  "23": {
    id: "",
    type: "custom",
    data: { craft_id: "23", emoji: "🛒", label: "Supermarket" },
    position: { x: 0, y: 0 },
  },
  "24": {
    id: "",
    type: "custom",
    data: { craft_id: "24", emoji: "🐝", label: "Bee" },
    position: { x: 0, y: 0 },
  },
  "25": {
    id: "",
    type: "custom",
    data: { craft_id: "25", emoji: "🌈", label: "Rainbow" },
    position: { x: 0, y: 0 },
  },
  "26": {
    id: "",
    type: "custom",
    data: { craft_id: "26", emoji: "🗿🔥", label: "Flint" },
    position: { x: 0, y: 0 },
  },
  "27": {
    id: "",
    type: "custom",
    data: { craft_id: "27", emoji: "⛱️", label: "Sand" },
    position: { x: 0, y: 0 },
  },
  "28": {
    id: "",
    type: "custom",
    data: { craft_id: "28", emoji: "🍳", label: "Frying Pan" },
    position: { x: 0, y: 0 },
  },
  "29": {
    id: "",
    type: "custom",
    data: { craft_id: "29", emoji: "🐸", label: "Pepe" },
    position: { x: 0, y: 0 },
  },
  "30": {
    id: "",
    type: "custom",
    data: { craft_id: "30", emoji: "🌊", label: "Ocean" },
    position: { x: 0, y: 0 },
  },
  "31": {
    id: "",
    type: "custom",
    data: { craft_id: "31", emoji: "🛢", label: "Oil" },
    position: { x: 0, y: 0 },
  },
  "32": {
    id: "",
    type: "custom",
    data: { craft_id: "32", emoji: "🚰", label: "Faucet" },
    position: { x: 0, y: 0 },
  },
  "33": {
    id: "",
    type: "custom",
    data: { craft_id: "33", emoji: "🍀", label: "Four Leaf Clover" },
    position: { x: 0, y: 0 },
  },
  "34": {
    id: "",
    type: "custom",
    data: { craft_id: "34", emoji: "🐍", label: "Snake" },
    position: { x: 0, y: 0 },
  },
  "35": {
    id: "",
    type: "custom",
    data: { craft_id: "35", emoji: "⚡", label: "Lightning" },
    position: { x: 0, y: 0 },
  },
  "36": {
    id: "",
    type: "custom",
    data: { craft_id: "36", emoji: "🦠", label: "Mitochondria" },
    position: { x: 0, y: 0 },
  },
  "37": {
    id: "",
    type: "custom",
    data: { craft_id: "37", emoji: "🔩", label: "Screw" },
    position: { x: 0, y: 0 },
  },
  "38": {
    id: "",
    type: "custom",
    data: { craft_id: "38", emoji: "🐛 ", label: "Bug" },
    position: { x: 0, y: 0 },
  },
  "39": {
    id: "",
    type: "custom",
    data: { craft_id: "39", emoji: "🐜", label: "Ant" },
    position: { x: 0, y: 0 },
  },
  "40": {
    id: "",
    type: "custom",
    data: { craft_id: "40", emoji: "❄", label: "Snow" },
    position: { x: 0, y: 0 },
  },
  "41": {
    id: "",
    type: "custom",
    data: { craft_id: "41", emoji: "💧", label: "Water" },
    position: { x: 0, y: 0 },
  },
  "42": {
    id: "",
    type: "custom",
    data: { craft_id: "42", emoji: "🛶", label: "Kayak" },
    position: { x: 0, y: 0 },
  },
  "43": {
    id: "",
    type: "custom",
    data: { craft_id: "43", emoji: "🌿", label: "Grass" },
    position: { x: 0, y: 0 },
  },
  "44": {
    id: "",
    type: "custom",
    data: { craft_id: "44", emoji: "🕷", label: "Spider" },
    position: { x: 0, y: 0 },
  },
  "45": {
    id: "",
    type: "custom",
    data: { craft_id: "45", emoji: "🏝", label: "Island" },
    position: { x: 0, y: 0 },
  },
  "46": {
    id: "",
    type: "custom",
    data: { craft_id: "46", emoji: "🗿", label: "Raw Iron" },
    position: { x: 0, y: 0 },
  },
  "47": {
    id: "",
    type: "custom",
    data: { craft_id: "47", emoji: "⛓️", label: "Chain" },
    position: { x: 0, y: 0 },
  },
  "48": {
    id: "",
    type: "custom",
    data: { craft_id: "48", emoji: "🍨", label: "Ice" },
    position: { x: 0, y: 0 },
  },
  "49": {
    id: "",
    type: "custom",
    data: { craft_id: "49", emoji: "🦸‍♂️", label: "Ironman" },
    position: { x: 0, y: 0 },
  },
  "50": {
    id: "",
    type: "custom",
    data: { craft_id: "50", emoji: "🏋🏼‍♂️", label: "Danbel" },
    position: { x: 0, y: 0 },
  },
  "51": {
    id: "",
    type: "custom",
    data: { craft_id: "51", emoji: "🗿", label: "Raw Coal" },
    position: { x: 0, y: 0 },
  },
  "52": {
    id: "",
    type: "custom",
    data: { craft_id: "52", emoji: "🏚️", label: "Cabin" },
    position: { x: 0, y: 0 },
  },
  "53": {
    id: "",
    type: "custom",
    data: { craft_id: "53", emoji: "☕", label: "Coffee" },
    position: { x: 0, y: 0 },
  },
  "54": {
    id: "",
    type: "custom",
    data: { craft_id: "54", emoji: "💣", label: "Bomberman" },
    position: { x: 0, y: 0 },
  },
  "55": {
    id: "",
    type: "custom",
    data: { craft_id: "55", emoji: "🏕️", label: "Camp" },
    position: { x: 0, y: 0 },
  },
  "56": {
    id: "",
    type: "custom",
    data: { craft_id: "56", emoji: "🗿", label: "Raw Lapis Lazuli" },
    position: { x: 0, y: 0 },
  },
  "57": {
    id: "",
    type: "custom",
    data: { craft_id: "57", emoji: "🛋", label: "Couch" },
    position: { x: 0, y: 0 },
  },
  "58": {
    id: "",
    type: "custom",
    data: { craft_id: "58", emoji: "🗿", label: "Ore Ore" },
    position: { x: 0, y: 0 },
  },
  "59": {
    id: "",
    type: "custom",
    data: { craft_id: "59", emoji: "🐞", label: "Lady Beetle" },
    position: { x: 0, y: 0 },
  },
  "60": {
    id: "",
    type: "custom",
    data: { craft_id: "60", emoji: "💍", label: "Ring" },
    position: { x: 0, y: 0 },
  },
  "61": {
    id: "",
    type: "custom",
    data: { craft_id: "61", emoji: "🗿", label: "Raw Copper" },
    position: { x: 0, y: 0 },
  },
  "62": {
    id: "",
    type: "custom",
    data: { craft_id: "62", emoji: "🗝️", label: "Key " },
    position: { x: 0, y: 0 },
  },
  "63": {
    id: "",
    type: "custom",
    data: { craft_id: "63", emoji: "🍡", label: "Dango" },
    position: { x: 0, y: 0 },
  },
  "64": {
    id: "",
    type: "custom",
    data: { craft_id: "64", emoji: "🧓", label: "Person" },
    position: { x: 0, y: 0 },
  },
  "65": {
    id: "",
    type: "custom",
    data: { craft_id: "65", emoji: "♨️", label: "Hotspring" },
    position: { x: 0, y: 0 },
  },
  "66": {
    id: "",
    type: "custom",
    data: { craft_id: "66", emoji: "🌿", label: "Leaf" },
    position: { x: 0, y: 0 },
  },
  "67": {
    id: "",
    type: "custom",
    data: { craft_id: "67", emoji: "🚪", label: "Door" },
    position: { x: 0, y: 0 },
  },
  "68": {
    id: "",
    type: "custom",
    data: { craft_id: "68", emoji: "🍵", label: "Matcha" },
    position: { x: 0, y: 0 },
  },
  "69": {
    id: "",
    type: "custom",
    data: { craft_id: "69", emoji: "🧑", label: "Woman" },
    position: { x: 0, y: 0 },
  },
  "70": {
    id: "",
    type: "custom",
    data: { craft_id: "70", emoji: "🎄", label: "Christmas Tree" },
    position: { x: 0, y: 0 },
  },
  "71": {
    id: "",
    type: "custom",
    data: { craft_id: "71", emoji: "🍤", label: "Tempura" },
    position: { x: 0, y: 0 },
  },
  "72": {
    id: "",
    type: "custom",
    data: { craft_id: "72", emoji: "🔘", label: "Tire" },
    position: { x: 0, y: 0 },
  },
  "73": {
    id: "",
    type: "custom",
    data: { craft_id: "73", emoji: "🍜", label: "Ramen" },
    position: { x: 0, y: 0 },
  },
  "74": {
    id: "",
    type: "custom",
    data: { craft_id: "74", emoji: "👱", label: "Man" },
    position: { x: 0, y: 0 },
  },
  "75": {
    id: "",
    type: "custom",
    data: { craft_id: "75", emoji: "☁", label: "Cloud" },
    position: { x: 0, y: 0 },
  },
  "76": {
    id: "",
    type: "custom",
    data: { craft_id: "76", emoji: "🥔", label: "Poteto Soup" },
    position: { x: 0, y: 0 },
  },
  "77": {
    id: "",
    type: "custom",
    data: { craft_id: "77", emoji: "💺", label: "Chair" },
    position: { x: 0, y: 0 },
  },
  "78": {
    id: "",
    type: "custom",
    data: { craft_id: "78", emoji: "🍛", label: "Curry" },
    position: { x: 0, y: 0 },
  },
  "79": {
    id: "",
    type: "custom",
    data: { craft_id: "79", emoji: "👧", label: "Girl" },
    position: { x: 0, y: 0 },
  },
  "80": {
    id: "",
    type: "custom",
    data: { craft_id: "80", emoji: "🌧", label: "Rain" },
    position: { x: 0, y: 0 },
  },
  "81": {
    id: "",
    type: "custom",
    data: { craft_id: "81", emoji: "👩‍⚖️", label: "Pregnancy" },
    position: { x: 0, y: 0 },
  },
  "82": {
    id: "",
    type: "custom",
    data: { craft_id: "82", emoji: "👶🚗", label: "Chair" },
    position: { x: 0, y: 0 },
  },
  "83": {
    id: "",
    type: "custom",
    data: { craft_id: "83", emoji: "🍼", label: "Baby Milk" },
    position: { x: 0, y: 0 },
  },
  "84": {
    id: "",
    type: "custom",
    data: { craft_id: "84", emoji: "👦", label: "Boy" },
    position: { x: 0, y: 0 },
  },
  "85": {
    id: "",
    type: "custom",
    data: { craft_id: "85", emoji: "🌪", label: "Tornado" },
    position: { x: 0, y: 0 },
  },
  "86": {
    id: "",
    type: "custom",
    data: { craft_id: "86", emoji: "🐔", label: "Chicken Meat" },
    position: { x: 0, y: 0 },
  },
  "87": {
    id: "",
    type: "custom",
    data: { craft_id: "87", emoji: "🎲", label: "Dice" },
    position: { x: 0, y: 0 },
  },
  "88": {
    id: "",
    type: "custom",
    data: { craft_id: "88", emoji: "🥚", label: "Egg" },
    position: { x: 0, y: 0 },
  },
  "89": {
    id: "",
    type: "custom",
    data: { craft_id: "89", emoji: "🐲", label: "Dragon" },
    position: { x: 0, y: 0 },
  },
  "90": {
    id: "",
    type: "custom",
    data: { craft_id: "90", emoji: "⭐", label: "Star" },
    position: { x: 0, y: 0 },
  },
  "91": {
    id: "",
    type: "custom",
    data: { craft_id: "91", emoji: "⭐", label: "Star" },
    position: { x: 0, y: 0 },
  },
  "92": {
    id: "",
    type: "custom",
    data: { craft_id: "92", emoji: "🚀", label: "Rocket" },
    position: { x: 0, y: 0 },
  },
  "93": {
    id: "",
    type: "custom",
    data: { craft_id: "93", emoji: "🌭", label: "Hotdog" },
    position: { x: 0, y: 0 },
  },
  "94": {
    id: "",
    type: "custom",
    data: { craft_id: "94", emoji: "🌝", label: "Full Moon Face" },
    position: { x: 0, y: 0 },
  },
  "95": {
    id: "",
    type: "custom",
    data: { craft_id: "95", emoji: "🌌", label: "Space" },
    position: { x: 0, y: 0 },
  },
  "96": {
    id: "",
    type: "custom",
    data: { craft_id: "96", emoji: "🗡️", label: "Excalibur" },
    position: { x: 0, y: 0 },
  },
  "97": {
    id: "",
    type: "custom",
    data: { craft_id: "97", emoji: "🧛", label: "Vampire" },
    position: { x: 0, y: 0 },
  },
  "98": {
    id: "",
    type: "custom",
    data: { craft_id: "98", emoji: "🔪", label: "Kitchen Knife" },
    position: { x: 0, y: 0 },
  },
  "99": {
    id: "",
    type: "custom",
    data: { craft_id: "99", emoji: "🧝", label: "Elf" },
    position: { x: 0, y: 0 },
  },
  "100": {
    id: "",
    type: "custom",
    data: { craft_id: "100", emoji: "🧜", label: "Merperson" },
    position: { x: 0, y: 0 },
  },
  "101": {
    id: "",
    type: "custom",
    data: { craft_id: "101", emoji: "🧞", label: "Genie" },
    position: { x: 0, y: 0 },
  },
  "102": {
    id: "",
    type: "custom",
    data: { craft_id: "102", emoji: "🧟", label: "Zombie" },
    position: { x: 0, y: 0 },
  },
  "103": {
    id: "",
    type: "custom",
    data: { craft_id: "103", emoji: "👑", label: "Crown" },
    position: { x: 0, y: 0 },
  },
  "104": {
    id: "",
    type: "custom",
    data: { craft_id: "104", emoji: "🥣", label: "Bowl" },
    position: { x: 0, y: 0 },
  },
  "105": {
    id: "",
    type: "custom",
    data: { craft_id: "105", emoji: "🥗", label: "Green Salada" },
    position: { x: 0, y: 0 },
  },
  "106": {
    id: "",
    type: "custom",
    data: { craft_id: "106", emoji: "⛏️", label: "Pickaxe" },
    position: { x: 0, y: 0 },
  },
  "107": {
    id: "",
    type: "custom",
    data: { craft_id: "107", emoji: "🧂", label: "Salt" },
    position: { x: 0, y: 0 },
  },
  "108": {
    id: "",
    type: "custom",
    data: { craft_id: "108", emoji: "🤴🏻", label: "King" },
    position: { x: 0, y: 0 },
  },
  "109": {
    id: "",
    type: "custom",
    data: { craft_id: "109", emoji: "🏹", label: "Bow" },
    position: { x: 0, y: 0 },
  },
  "110": {
    id: "",
    type: "custom",
    data: { craft_id: "110", emoji: "🥢", label: "Chopsticks" },
    position: { x: 0, y: 0 },
  },
  "111": {
    id: "",
    type: "custom",
    data: { craft_id: "111", emoji: "🛣", label: "Way" },
    position: { x: 0, y: 0 },
  },
  "112": {
    id: "",
    type: "custom",
    data: { craft_id: "112", emoji: "🚂", label: "Locomotive" },
    position: { x: 0, y: 0 },
  },
  "113": {
    id: "",
    type: "custom",
    data: { craft_id: "113", emoji: "🚃", label: "Railway Car" },
    position: { x: 0, y: 0 },
  },
  "114": {
    id: "",
    type: "custom",
    data: { craft_id: "114", emoji: "🚄", label: "High-Speed Train" },
    position: { x: 0, y: 0 },
  },
  "115": {
    id: "",
    type: "custom",
    data: { craft_id: "115", emoji: "🚅", label: "Bullet Train" },
    position: { x: 0, y: 0 },
  },
  "116": {
    id: "",
    type: "custom",
    data: { craft_id: "116", emoji: "🚇", label: "Metro" },
    position: { x: 0, y: 0 },
  },
  "117": {
    id: "",
    type: "custom",
    data: { craft_id: "117", emoji: "🚈", label: "Light Rail" },
    position: { x: 0, y: 0 },
  },
  "118": {
    id: "",
    type: "custom",
    data: { craft_id: "118", emoji: "🚉", label: "Station" },
    position: { x: 0, y: 0 },
  },
  "119": {
    id: "",
    type: "custom",
    data: { craft_id: "119", emoji: "🚝", label: "Monorail" },
    position: { x: 0, y: 0 },
  },
  "120": {
    id: "",
    type: "custom",
    data: { craft_id: "120", emoji: "🚞", label: "Mountain Railway" },
    position: { x: 0, y: 0 },
  },
  "121": {
    id: "",
    type: "custom",
    data: { craft_id: "121", emoji: "🚋", label: "Tram Car" },
    position: { x: 0, y: 0 },
  },
  "122": {
    id: "",
    type: "custom",
    data: { craft_id: "122", emoji: "🚌", label: "Bus" },
    position: { x: 0, y: 0 },
  },
  "123": {
    id: "",
    type: "custom",
    data: { craft_id: "123", emoji: "🚍", label: "Oncoming Bus" },
    position: { x: 0, y: 0 },
  },
  "124": {
    id: "",
    type: "custom",
    data: { craft_id: "124", emoji: "🚎", label: "Trolleybus" },
    position: { x: 0, y: 0 },
  },
  "125": {
    id: "",
    type: "custom",
    data: { craft_id: "125", emoji: "🛤", label: "Railway Track" },
    position: { x: 0, y: 0 },
  },
  "126": {
    id: "",
    type: "custom",
    data: { craft_id: "126", emoji: "🛢", label: "Oil Drum" },
    position: { x: 0, y: 0 },
  },
  "127": {
    id: "",
    type: "custom",
    data: { craft_id: "127", emoji: "⛽", label: "Fuel Pump" },
    position: { x: 0, y: 0 },
  },
  "128": {
    id: "",
    type: "custom",
    data: { craft_id: "128", emoji: "🛞", label: "Wheel" },
    position: { x: 0, y: 0 },
  },
  "129": {
    id: "",
    type: "custom",
    data: { craft_id: "129", emoji: "🚨", label: "Police Car Light" },
    position: { x: 0, y: 0 },
  },
  "130": {
    id: "",
    type: "custom",
    data: { craft_id: "130", emoji: "🚥", label: "Horizontal Traffic Light" },
    position: { x: 0, y: 0 },
  },
  "131": {
    id: "",
    type: "custom",
    data: { craft_id: "131", emoji: "🚦", label: "Vertical Traffic Light" },
    position: { x: 0, y: 0 },
  },
  "132": {
    id: "",
    type: "custom",
    data: { craft_id: "132", emoji: "🛑", label: "Stop Sign" },
    position: { x: 0, y: 0 },
  },
  "133": {
    id: "",
    type: "custom",
    data: { craft_id: "133", emoji: "🚧", label: "Construction" },
    position: { x: 0, y: 0 },
  },
  "134": {
    id: "",
    type: "custom",
    data: { craft_id: "134", emoji: "⚓", label: "Anchor" },
    position: { x: 0, y: 0 },
  },
  "135": {
    id: "",
    type: "custom",
    data: { craft_id: "135", emoji: "⛴", label: "Ferry" },
    position: { x: 0, y: 0 },
  },
  "136": {
    id: "",
    type: "custom",
    data: { craft_id: "136", emoji: "🚢", label: "Ship" },
    position: { x: 0, y: 0 },
  },
  "137": {
    id: "",
    type: "custom",
    data: { craft_id: "137", emoji: "✈", label: "Airplane" },
    position: { x: 0, y: 0 },
  },
  "138": {
    id: "",
    type: "custom",
    data: { craft_id: "138", emoji: "♈", label: "Aries" },
    position: { x: 0, y: 0 },
  },
  "139": {
    id: "",
    type: "custom",
    data: { craft_id: "139", emoji: "♉", label: "Taurus" },
    position: { x: 0, y: 0 },
  },
  "140": {
    id: "",
    type: "custom",
    data: { craft_id: "140", emoji: "♊", label: "Gemini" },
    position: { x: 0, y: 0 },
  },
  "141": {
    id: "",
    type: "custom",
    data: { craft_id: "141", emoji: "♋", label: "Cancer" },
    position: { x: 0, y: 0 },
  },
  "142": {
    id: "",
    type: "custom",
    data: { craft_id: "142", emoji: "♌", label: "Leo" },
    position: { x: 0, y: 0 },
  },
  "143": {
    id: "",
    type: "custom",
    data: { craft_id: "143", emoji: "♍", label: "Virgo" },
    position: { x: 0, y: 0 },
  },
  "144": {
    id: "",
    type: "custom",
    data: { craft_id: "144", emoji: "♎", label: "Libra" },
    position: { x: 0, y: 0 },
  },
  "145": {
    id: "",
    type: "custom",
    data: { craft_id: "145", emoji: "♏", label: "Scorpio" },
    position: { x: 0, y: 0 },
  },
  "146": {
    id: "",
    type: "custom",
    data: { craft_id: "146", emoji: "♐", label: "Sagittarius" },
    position: { x: 0, y: 0 },
  },
  "147": {
    id: "",
    type: "custom",
    data: { craft_id: "147", emoji: "♑", label: "Capricorn" },
    position: { x: 0, y: 0 },
  },
  "148": {
    id: "",
    type: "custom",
    data: { craft_id: "148", emoji: "♒", label: "Aquarius" },
    position: { x: 0, y: 0 },
  },
  "149": {
    id: "",
    type: "custom",
    data: { craft_id: "149", emoji: "♓", label: "Pisces" },
    position: { x: 0, y: 0 },
  },
  "150": {
    id: "",
    type: "custom",
    data: { craft_id: "150", emoji: "🗺", label: "Country" },
    position: { x: 0, y: 0 },
  },
  "151": {
    id: "",
    type: "custom",
    data: { craft_id: "151", emoji: "🏞", label: "Iron Land" },
    position: { x: 0, y: 0 },
  },
  "152": {
    id: "",
    type: "custom",
    data: { craft_id: "152", emoji: "🏞", label: "Coal Land" },
    position: { x: 0, y: 0 },
  },
  "153": {
    id: "",
    type: "custom",
    data: { craft_id: "153", emoji: "🏞", label: "Iron Land" },
    position: { x: 0, y: 0 },
  },
  "154": {
    id: "",
    type: "custom",
    data: { craft_id: "154", emoji: "🏞", label: "Lapis Lazuli Land" },
    position: { x: 0, y: 0 },
  },
  "155": {
    id: "",
    type: "custom",
    data: { craft_id: "155", emoji: "🌴", label: "Jungle" },
    position: { x: 0, y: 0 },
  },
  "156": {
    id: "",
    type: "custom",
    data: { craft_id: "156", emoji: "🌾🍞🏞", label: "Wheat Field" },
    position: { x: 0, y: 0 },
  },
  "157": {
    id: "",
    type: "custom",
    data: { craft_id: "157", emoji: "🥔🏞", label: "Poteto Filed" },
    position: { x: 0, y: 0 },
  },
  "158": {
    id: "",
    type: "custom",
    data: { craft_id: "158", emoji: "👶🛝", label: "Playground" },
    position: { x: 0, y: 0 },
  },
  "159": {
    id: "",
    type: "custom",
    data: { craft_id: "159", emoji: "🐔🏞", label: "Chicken Farm" },
    position: { x: 0, y: 0 },
  },
  "160": {
    id: "",
    type: "custom",
    data: { craft_id: "160", emoji: "🌕🏞", label: "Moon Farm" },
    position: { x: 0, y: 0 },
  },
  "161": {
    id: "",
    type: "custom",
    data: { craft_id: "161", emoji: "🗿", label: "Steel Ore" },
    position: { x: 0, y: 0 },
  },
  "162": {
    id: "",
    type: "custom",
    data: { craft_id: "162", emoji: "🗿", label: "Diamond Ore" },
    position: { x: 0, y: 0 },
  },
  "163": {
    id: "",
    type: "custom",
    data: { craft_id: "163", emoji: "⚗", label: "Alembic" },
    position: { x: 0, y: 0 },
  },
  "164": {
    id: "",
    type: "custom",
    data: { craft_id: "164", emoji: "🧪", label: "Test Tube" },
    position: { x: 0, y: 0 },
  },
  "165": {
    id: "",
    type: "custom",
    data: { craft_id: "165", emoji: "🧫", label: "Petri Dish" },
    position: { x: 0, y: 0 },
  },
  "166": {
    id: "",
    type: "custom",
    data: { craft_id: "166", emoji: "🧬", label: "Dna" },
    position: { x: 0, y: 0 },
  },
  "167": {
    id: "",
    type: "custom",
    data: { craft_id: "167", emoji: "🔬", label: "Microscope" },
    position: { x: 0, y: 0 },
  },
  "168": {
    id: "",
    type: "custom",
    data: { craft_id: "168", emoji: "🔭", label: "Telescope" },
    position: { x: 0, y: 0 },
  },
  "169": {
    id: "",
    type: "custom",
    data: { craft_id: "169", emoji: "📡", label: "Satellite Antenna" },
    position: { x: 0, y: 0 },
  },
  "170": {
    id: "",
    type: "custom",
    data: { craft_id: "170", emoji: "💊", label: "Pill" },
    position: { x: 0, y: 0 },
  },
  "171": {
    id: "",
    type: "custom",
    data: { craft_id: "171", emoji: "🗿🧡", label: "Blast Ore" },
    position: { x: 0, y: 0 },
  },
  "172": {
    id: "",
    type: "custom",
    data: { craft_id: "172", emoji: "✏", label: "Pen" },
    position: { x: 0, y: 0 },
  },
  "173": {
    id: "",
    type: "custom",
    data: { craft_id: "173", emoji: "🗿", label: "Emerald Ore" },
    position: { x: 0, y: 0 },
  },
  "174": {
    id: "",
    type: "custom",
    data: { craft_id: "174", emoji: "📝", label: "Memo" },
    position: { x: 0, y: 0 },
  },
  "175": {
    id: "",
    type: "custom",
    data: { craft_id: "175", emoji: "💼", label: "Briefcase" },
    position: { x: 0, y: 0 },
  },
  "176": {
    id: "",
    type: "custom",
    data: { craft_id: "176", emoji: "✂", label: "Scissors" },
    position: { x: 0, y: 0 },
  },
  "177": {
    id: "",
    type: "custom",
    data: { craft_id: "177", emoji: "⚖", label: "Balance Scale" },
    position: { x: 0, y: 0 },
  },
  "178": {
    id: "",
    type: "custom",
    data: { craft_id: "178", emoji: "🗑", label: "Wastebasket" },
    position: { x: 0, y: 0 },
  },
  "179": {
    id: "",
    type: "custom",
    data: { craft_id: "179", emoji: "🔧", label: "Wrench" },
    position: { x: 0, y: 0 },
  },
  "180": {
    id: "",
    type: "custom",
    data: { craft_id: "180", emoji: "🗿🔴", label: "Redstone Ore" },
    position: { x: 0, y: 0 },
  },
  "181": {
    id: "",
    type: "custom",
    data: { craft_id: "181", emoji: "🗿", label: "Safaia Ore" },
    position: { x: 0, y: 0 },
  },
  "182": {
    id: "",
    type: "custom",
    data: { craft_id: "182", emoji: "💉", label: "Syringe" },
    position: { x: 0, y: 0 },
  },
  "183": {
    id: "",
    type: "custom",
    data: { craft_id: "183", emoji: "🛏", label: "Bed" },
    position: { x: 0, y: 0 },
  },
  "184": {
    id: "",
    type: "custom",
    data: { craft_id: "184", emoji: "🚽", label: "Toilet" },
    position: { x: 0, y: 0 },
  },
  "185": {
    id: "",
    type: "custom",
    data: { craft_id: "185", emoji: "🚿", label: "Shower" },
    position: { x: 0, y: 0 },
  },
  "186": {
    id: "",
    type: "custom",
    data: { craft_id: "186", emoji: "🧹", label: "Broom" },
    position: { x: 0, y: 0 },
  },
  "187": {
    id: "",
    type: "custom",
    data: { craft_id: "187", emoji: "🧻", label: "Roll Of Paper" },
    position: { x: 0, y: 0 },
  },
  "188": {
    id: "",
    type: "custom",
    data: { craft_id: "188", emoji: "🗿", label: "Gold Ore" },
    position: { x: 0, y: 0 },
  },
  "189": {
    id: "",
    type: "custom",
    data: { craft_id: "189", emoji: "🚬", label: "Cigarette" },
    position: { x: 0, y: 0 },
  },
  "190": {
    id: "",
    type: "custom",
    data: { craft_id: "190", emoji: "⚰", label: "Coffin" },
    position: { x: 0, y: 0 },
  },
  "191": {
    id: "",
    type: "custom",
    data: { craft_id: "191", emoji: "⚱", label: "Funeral Urn" },
    position: { x: 0, y: 0 },
  },
  "192": {
    id: "",
    type: "custom",
    data: { craft_id: "192", emoji: "🧿", label: "Nazar Amulet" },
    position: { x: 0, y: 0 },
  },
  "193": {
    id: "",
    type: "custom",
    data: { craft_id: "193", emoji: "⚠", label: "Warning" },
    position: { x: 0, y: 0 },
  },
  "194": {
    id: "",
    type: "custom",
    data: { craft_id: "194", emoji: "⛔", label: "No Entry" },
    position: { x: 0, y: 0 },
  },
  "195": {
    id: "",
    type: "custom",
    data: { craft_id: "195", emoji: "🌵", label: "Cactus" },
    position: { x: 0, y: 0 },
  },
  "196": {
    id: "",
    type: "custom",
    data: { craft_id: "196", emoji: "🌳", label: "Deciduous Tree" },
    position: { x: 0, y: 0 },
  },
  "197": {
    id: "",
    type: "custom",
    data: { craft_id: "197", emoji: "🌿", label: "Herb" },
    position: { x: 0, y: 0 },
  },
  "198": {
    id: "",
    type: "custom",
    data: { craft_id: "198", emoji: "🍁", label: "Maple Leaf" },
    position: { x: 0, y: 0 },
  },
  "199": {
    id: "",
    type: "custom",
    data: { craft_id: "199", emoji: "🍂", label: "Fallen Leaf" },
    position: { x: 0, y: 0 },
  },
  "200": {
    id: "",
    type: "custom",
    data: { craft_id: "200", emoji: "🍃", label: "Leaf Fluttering In Wind" },
    position: { x: 0, y: 0 },
  },
  "201": {
    id: "",
    type: "custom",
    data: { craft_id: "201", emoji: "🍝", label: "Pasta" },
    position: { x: 0, y: 0 },
  },
  "202": {
    id: "",
    type: "custom",
    data: { craft_id: "202", emoji: "🥖", label: "Bread" },
    position: { x: 0, y: 0 },
  },
  "203": {
    id: "",
    type: "custom",
    data: { craft_id: "203", emoji: "🥐", label: "Croissant" },
    position: { x: 0, y: 0 },
  },
  "204": {
    id: "",
    type: "custom",
    data: { craft_id: "204", emoji: "🥪", label: "Sandwich" },
    position: { x: 0, y: 0 },
  },
  "205": {
    id: "",
    type: "custom",
    data: { craft_id: "205", emoji: "🥞", label: "Pancake" },
    position: { x: 0, y: 0 },
  },
  "206": {
    id: "",
    type: "custom",
    data: { craft_id: "206", emoji: "🐷", label: "Pork" },
    position: { x: 0, y: 0 },
  },
  "207": {
    id: "",
    type: "custom",
    data: { craft_id: "207", emoji: "🥩", label: "Stake" },
    position: { x: 0, y: 0 },
  },
  "208": {
    id: "",
    type: "custom",
    data: { craft_id: "208", emoji: "🏾", label: "Leather" },
    position: { x: 0, y: 0 },
  },
  "209": {
    id: "",
    type: "custom",
    data: { craft_id: "209", emoji: "🧶", label: "Wool" },
    position: { x: 0, y: 0 },
  },
  "210": {
    id: "",
    type: "custom",
    data: { craft_id: "210", emoji: "💩", label: "Shit" },
    position: { x: 0, y: 0 },
  },
  "211": {
    id: "",
    type: "custom",
    data: { craft_id: "211", emoji: "🐥", label: "Baby Chick" },
    position: { x: 0, y: 0 },
  },
  "212": {
    id: "",
    type: "custom",
    data: { craft_id: "212", emoji: "🐕", label: "Doge" },
    position: { x: 0, y: 0 },
  },
  "213": {
    id: "",
    type: "custom",
    data: { craft_id: "213", emoji: "🐕", label: "Shiba" },
    position: { x: 0, y: 0 },
  },
  "214": {
    id: "",
    type: "custom",
    data: { craft_id: "214", emoji: "◽", label: "Sugar" },
    position: { x: 0, y: 0 },
  },
  "215": {
    id: "",
    type: "custom",
    data: { craft_id: "215", emoji: "🌞", label: "Sun" },
    position: { x: 0, y: 0 },
  },
  "216": {
    id: "",
    type: "custom",
    data: { craft_id: "216", emoji: "💡", label: "Light" },
    position: { x: 0, y: 0 },
  },
  "217": {
    id: "",
    type: "custom",
    data: { craft_id: "217", emoji: "📣", label: "Megaphone" },
    position: { x: 0, y: 0 },
  },
  "218": {
    id: "",
    type: "custom",
    data: { craft_id: "218", emoji: "🍇", label: "Grapes" },
    position: { x: 0, y: 0 },
  },
  "219": {
    id: "",
    type: "custom",
    data: { craft_id: "219", emoji: "👨‍🎓", label: "Student" },
    position: { x: 0, y: 0 },
  },
  "220": {
    id: "",
    type: "custom",
    data: { craft_id: "220", emoji: "🏴‍☠️", label: "Monkey D. Luffy" },
    position: { x: 0, y: 0 },
  },
  "221": {
    id: "",
    type: "custom",
    data: { craft_id: "221", emoji: "👕", label: "Cloth" },
    position: { x: 0, y: 0 },
  },
  "222": {
    id: "",
    type: "custom",
    data: { craft_id: "222", emoji: "🏰", label: "Castle" },
    position: { x: 0, y: 0 },
  },
  "223": {
    id: "",
    type: "custom",
    data: { craft_id: "223", emoji: "🥟", label: "Dumprin " },
    position: { x: 0, y: 0 },
  },
  "224": {
    id: "",
    type: "custom",
    data: { craft_id: "224", emoji: "🦉", label: "Owl" },
    position: { x: 0, y: 0 },
  },
  "225": {
    id: "",
    type: "custom",
    data: { craft_id: "225", emoji: "🏴‍☠️", label: "Roronoa Zoro" },
    position: { x: 0, y: 0 },
  },
  "226": {
    id: "",
    type: "custom",
    data: { craft_id: "226", emoji: "🛒", label: "Cvs" },
    position: { x: 0, y: 0 },
  },
  "227": {
    id: "",
    type: "custom",
    data: { craft_id: "227", emoji: "🚕", label: "Taxi" },
    position: { x: 0, y: 0 },
  },
  "228": {
    id: "",
    type: "custom",
    data: { craft_id: "228", emoji: "🥝", label: "Kiwi" },
    position: { x: 0, y: 0 },
  },
  "229": {
    id: "",
    type: "custom",
    data: { craft_id: "229", emoji: "🦢", label: "Swan" },
    position: { x: 0, y: 0 },
  },
  "230": {
    id: "",
    type: "custom",
    data: { craft_id: "230", emoji: "🏴‍☠️", label: "Nami" },
    position: { x: 0, y: 0 },
  },
  "231": {
    id: "",
    type: "custom",
    data: { craft_id: "231", emoji: "🍯🐝", label: "Honeysyrop" },
    position: { x: 0, y: 0 },
  },
  "232": {
    id: "",
    type: "custom",
    data: { craft_id: "232", emoji: "🛹", label: "Skateboard" },
    position: { x: 0, y: 0 },
  },
  "233": {
    id: "",
    type: "custom",
    data: { craft_id: "233", emoji: "🍈", label: "Melon" },
    position: { x: 0, y: 0 },
  },
  "234": {
    id: "",
    type: "custom",
    data: { craft_id: "234", emoji: "🐌", label: "Snail" },
    position: { x: 0, y: 0 },
  },
  "235": {
    id: "",
    type: "custom",
    data: { craft_id: "235", emoji: "🏴‍☠️", label: "Usopp" },
    position: { x: 0, y: 0 },
  },
  "236": {
    id: "",
    type: "custom",
    data: { craft_id: "236", emoji: "🔴", label: "Red" },
    position: { x: 0, y: 0 },
  },
  "237": {
    id: "",
    type: "custom",
    data: { craft_id: "237", emoji: "🏍", label: "Bike" },
    position: { x: 0, y: 0 },
  },
  "238": {
    id: "",
    type: "custom",
    data: { craft_id: "238", emoji: "🍌", label: "Banana" },
    position: { x: 0, y: 0 },
  },
  "239": {
    id: "",
    type: "custom",
    data: { craft_id: "239", emoji: "👨‍🏫", label: "Teacher" },
    position: { x: 0, y: 0 },
  },
  "240": {
    id: "",
    type: "custom",
    data: { craft_id: "240", emoji: "🏴‍☠️", label: "Onepiece" },
    position: { x: 0, y: 0 },
  },
  "241": {
    id: "",
    type: "custom",
    data: { craft_id: "241", emoji: "🔥", label: "Fire" },
    position: { x: 0, y: 0 },
  },
  "242": {
    id: "",
    type: "custom",
    data: { craft_id: "242", emoji: "🚒", label: "Firetruck" },
    position: { x: 0, y: 0 },
  },
  "243": {
    id: "",
    type: "custom",
    data: { craft_id: "243", emoji: "🌶", label: "Pepper" },
    position: { x: 0, y: 0 },
  },
  "244": {
    id: "",
    type: "custom",
    data: { craft_id: "244", emoji: "👨‍🍳", label: "Chef" },
    position: { x: 0, y: 0 },
  },
  "245": {
    id: "",
    type: "custom",
    data: { craft_id: "245", emoji: "🔮", label: "Orb" },
    position: { x: 0, y: 0 },
  },
  "246": {
    id: "",
    type: "custom",
    data: { craft_id: "246", emoji: "⛱️", label: "Sea" },
    position: { x: 0, y: 0 },
  },
  "247": {
    id: "",
    type: "custom",
    data: { craft_id: "247", emoji: "⛵", label: "Boat" },
    position: { x: 0, y: 0 },
  },
  "248": {
    id: "",
    type: "custom",
    data: { craft_id: "248", emoji: "🍪", label: "Cokkie" },
    position: { x: 0, y: 0 },
  },
  "249": {
    id: "",
    type: "custom",
    data: { craft_id: "249", emoji: "🕊", label: "Dove" },
    position: { x: 0, y: 0 },
  },
  "250": {
    id: "",
    type: "custom",
    data: { craft_id: "250", emoji: "🏴‍☠️", label: "Sanji" },
    position: { x: 0, y: 0 },
  },
  "251": {
    id: "",
    type: "custom",
    data: { craft_id: "251", emoji: "🛫", label: "Fly" },
    position: { x: 0, y: 0 },
  },
  "252": {
    id: "",
    type: "custom",
    data: { craft_id: "252", emoji: "🍽️", label: "Kitchen" },
    position: { x: 0, y: 0 },
  },
  "253": {
    id: "",
    type: "custom",
    data: { craft_id: "253", emoji: "🍳", label: "Sunny Side Up Egg" },
    position: { x: 0, y: 0 },
  },
  "254": {
    id: "",
    type: "custom",
    data: { craft_id: "254", emoji: "🦅", label: "Eagle" },
    position: { x: 0, y: 0 },
  },
  "255": {
    id: "",
    type: "custom",
    data: { craft_id: "255", emoji: "🏴‍☠️", label: "Tony Tony Chopper" },
    position: { x: 0, y: 0 },
  },
  "256": {
    id: "",
    type: "custom",
    data: { craft_id: "256", emoji: "🐸", label: "Pepecoin" },
    position: { x: 0, y: 0 },
  },
  "257": {
    id: "",
    type: "custom",
    data: { craft_id: "257", emoji: "💻", label: "Macbook" },
    position: { x: 0, y: 0 },
  },
  "258": {
    id: "",
    type: "custom",
    data: { craft_id: "258", emoji: "🐸🍏", label: "Pepe Apple" },
    position: { x: 0, y: 0 },
  },
  "259": {
    id: "",
    type: "custom",
    data: { craft_id: "259", emoji: "🐕", label: "Dog" },
    position: { x: 0, y: 0 },
  },
  "260": {
    id: "",
    type: "custom",
    data: { craft_id: "260", emoji: "🏴‍☠️", label: "Nico Robin" },
    position: { x: 0, y: 0 },
  },
  "261": {
    id: "",
    type: "custom",
    data: { craft_id: "261", emoji: "🏞️", label: "Lake" },
    position: { x: 0, y: 0 },
  },
  "262": {
    id: "",
    type: "custom",
    data: { craft_id: "262", emoji: "🕓", label: "Clock" },
    position: { x: 0, y: 0 },
  },
  "263": {
    id: "",
    type: "custom",
    data: { craft_id: "263", emoji: "🍷", label: "Wine" },
    position: { x: 0, y: 0 },
  },
  "264": {
    id: "",
    type: "custom",
    data: { craft_id: "264", emoji: "🐩", label: "Poodle" },
    position: { x: 0, y: 0 },
  },
  "265": {
    id: "",
    type: "custom",
    data: { craft_id: "265", emoji: "🏴‍☠️", label: "Franky" },
    position: { x: 0, y: 0 },
  },
  "266": {
    id: "",
    type: "custom",
    data: { craft_id: "266", emoji: "🧡", label: "Blast Oil" },
    position: { x: 0, y: 0 },
  },
  "267": {
    id: "",
    type: "custom",
    data: { craft_id: "267", emoji: "⛽", label: "Gas" },
    position: { x: 0, y: 0 },
  },
  "268": {
    id: "",
    type: "custom",
    data: { craft_id: "268", emoji: "🍺", label: "Beer" },
    position: { x: 0, y: 0 },
  },
  "269": {
    id: "",
    type: "custom",
    data: { craft_id: "269", emoji: "🐺", label: "Wolf" },
    position: { x: 0, y: 0 },
  },
  "270": {
    id: "",
    type: "custom",
    data: { craft_id: "270", emoji: "🏴‍☠️", label: "Boa Hancock" },
    position: { x: 0, y: 0 },
  },
  "271": {
    id: "",
    type: "custom",
    data: { craft_id: "271", emoji: "🧡", label: "Blast" },
    position: { x: 0, y: 0 },
  },
  "272": {
    id: "",
    type: "custom",
    data: { craft_id: "272", emoji: "🕳️", label: "Sink" },
    position: { x: 0, y: 0 },
  },
  "273": {
    id: "",
    type: "custom",
    data: { craft_id: "273", emoji: "🍶", label: "Sake" },
    position: { x: 0, y: 0 },
  },
  "274": {
    id: "",
    type: "custom",
    data: { craft_id: "274", emoji: "🦊", label: "Fox" },
    position: { x: 0, y: 0 },
  },
  "275": {
    id: "",
    type: "custom",
    data: { craft_id: "275", emoji: "🏴‍☠️", label: "Portgas D. Ace" },
    position: { x: 0, y: 0 },
  },
  "276": {
    id: "",
    type: "custom",
    data: { craft_id: "276", emoji: "👅", label: "Rolling Stones" },
    position: { x: 0, y: 0 },
  },
  "277": {
    id: "",
    type: "custom",
    data: { craft_id: "277", emoji: "🚲", label: "Bicycle" },
    position: { x: 0, y: 0 },
  },
  "278": {
    id: "",
    type: "custom",
    data: { craft_id: "278", emoji: "🥭", label: "Mango" },
    position: { x: 0, y: 0 },
  },
  "279": {
    id: "",
    type: "custom",
    data: { craft_id: "279", emoji: "🐱", label: "Cat" },
    position: { x: 0, y: 0 },
  },
  "280": {
    id: "",
    type: "custom",
    data: { craft_id: "280", emoji: "🏴‍☠️", label: "Trafalgar Law" },
    position: { x: 0, y: 0 },
  },
  "281": {
    id: "",
    type: "custom",
    data: { craft_id: "281", emoji: "🧡", label: "Blast Snake" },
    position: { x: 0, y: 0 },
  },
  "282": {
    id: "",
    type: "custom",
    data: { craft_id: "282", emoji: "🚕", label: "Uber" },
    position: { x: 0, y: 0 },
  },
  "283": {
    id: "",
    type: "custom",
    data: { craft_id: "283", emoji: "🍎", label: "Red Apple" },
    position: { x: 0, y: 0 },
  },
  "284": {
    id: "",
    type: "custom",
    data: { craft_id: "284", emoji: "🦁", label: "Lion" },
    position: { x: 0, y: 0 },
  },
  "285": {
    id: "",
    type: "custom",
    data: { craft_id: "285", emoji: "🏴‍☠️", label: "Nefeltari Vivi" },
    position: { x: 0, y: 0 },
  },
  "286": {
    id: "",
    type: "custom",
    data: { craft_id: "286", emoji: "🧡", label: "Blast Lightning" },
    position: { x: 0, y: 0 },
  },
  "287": {
    id: "",
    type: "custom",
    data: { craft_id: "287", emoji: "🚚", label: "Delivery Truck" },
    position: { x: 0, y: 0 },
  },
  "288": {
    id: "",
    type: "custom",
    data: { craft_id: "288", emoji: "🍏", label: "Green Apple" },
    position: { x: 0, y: 0 },
  },
  "289": {
    id: "",
    type: "custom",
    data: { craft_id: "289", emoji: "👨‍🔬", label: "Scientist" },
    position: { x: 0, y: 0 },
  },
  "290": {
    id: "",
    type: "custom",
    data: { craft_id: "290", emoji: "🏴‍☠️", label: "Perona" },
    position: { x: 0, y: 0 },
  },
  "291": {
    id: "",
    type: "custom",
    data: { craft_id: "291", emoji: "🧡", label: "Blastdria" },
    position: { x: 0, y: 0 },
  },
  "292": {
    id: "",
    type: "custom",
    data: { craft_id: "292", emoji: "🚗", label: "Car" },
    position: { x: 0, y: 0 },
  },
  "293": {
    id: "",
    type: "custom",
    data: { craft_id: "293", emoji: "🍹", label: "Kombucha" },
    position: { x: 0, y: 0 },
  },
  "294": {
    id: "",
    type: "custom",
    data: { craft_id: "294", emoji: "🐷", label: "Pig" },
    position: { x: 0, y: 0 },
  },
  "295": {
    id: "",
    type: "custom",
    data: { craft_id: "295", emoji: "🏴‍☠️", label: "Brook" },
    position: { x: 0, y: 0 },
  },
  "296": {
    id: "",
    type: "custom",
    data: { craft_id: "296", emoji: "🥁", label: "Drum" },
    position: { x: 0, y: 0 },
  },
  "297": {
    id: "",
    type: "custom",
    data: { craft_id: "297", emoji: "🚜", label: "Digger" },
    position: { x: 0, y: 0 },
  },
  "298": {
    id: "",
    type: "custom",
    data: { craft_id: "298", emoji: "🍩", label: "Donuts" },
    position: { x: 0, y: 0 },
  },
  "299": {
    id: "",
    type: "custom",
    data: { craft_id: "299", emoji: "👨‍🎤", label: "Singer" },
    position: { x: 0, y: 0 },
  },
  "300": {
    id: "",
    type: "custom",
    data: { craft_id: "300", emoji: "🏴‍☠️", label: "Dracule Mihawk" },
    position: { x: 0, y: 0 },
  },
  "301": {
    id: "",
    type: "custom",
    data: { craft_id: "301", emoji: "🏾", label: "Dirt" },
    position: { x: 0, y: 0 },
  },
  "302": {
    id: "",
    type: "custom",
    data: { craft_id: "302", emoji: "🏗️", label: "Construction" },
    position: { x: 0, y: 0 },
  },
  "303": {
    id: "",
    type: "custom",
    data: { craft_id: "303", emoji: "🍉", label: "Watermelon" },
    position: { x: 0, y: 0 },
  },
  "304": {
    id: "",
    type: "custom",
    data: { craft_id: "304", emoji: "👨‍🎨", label: "Artist" },
    position: { x: 0, y: 0 },
  },
  "305": {
    id: "",
    type: "custom",
    data: { craft_id: "305", emoji: "🏴‍☠️", label: "Jewelry Bonney" },
    position: { x: 0, y: 0 },
  },
  "306": {
    id: "",
    type: "custom",
    data: { craft_id: "306", emoji: "🐜", label: "Babyant" },
    position: { x: 0, y: 0 },
  },
  "307": {
    id: "",
    type: "custom",
    data: { craft_id: "307", emoji: "🟢", label: "Tooth" },
    position: { x: 0, y: 0 },
  },
  "308": {
    id: "",
    type: "custom",
    data: { craft_id: "308", emoji: "🍐", label: "Pear" },
    position: { x: 0, y: 0 },
  },
  "309": {
    id: "",
    type: "custom",
    data: { craft_id: "309", emoji: "🐏", label: "Ram" },
    position: { x: 0, y: 0 },
  },
  "310": {
    id: "",
    type: "custom",
    data: { craft_id: "310", emoji: "🏴‍☠️", label: "Shanks" },
    position: { x: 0, y: 0 },
  },
  "311": {
    id: "",
    type: "custom",
    data: { craft_id: "311", emoji: "❄️", label: "Snowman" },
    position: { x: 0, y: 0 },
  },
  "312": {
    id: "",
    type: "custom",
    data: { craft_id: "312", emoji: "🏔️", label: "Snowmountain" },
    position: { x: 0, y: 0 },
  },
  "313": {
    id: "",
    type: "custom",
    data: { craft_id: "313", emoji: "🍑", label: "Peach" },
    position: { x: 0, y: 0 },
  },
  "314": {
    id: "",
    type: "custom",
    data: { craft_id: "314", emoji: "👨‍✈️", label: "Pilot" },
    position: { x: 0, y: 0 },
  },
  "315": {
    id: "",
    type: "custom",
    data: { craft_id: "315", emoji: "🏴‍☠️", label: "Belle-Mere" },
    position: { x: 0, y: 0 },
  },
  "316": {
    id: "",
    type: "custom",
    data: { craft_id: "316", emoji: "💨", label: "Air" },
    position: { x: 0, y: 0 },
  },
  "317": {
    id: "",
    type: "custom",
    data: { craft_id: "317", emoji: "🏞️", label: "River" },
    position: { x: 0, y: 0 },
  },
  "318": {
    id: "",
    type: "custom",
    data: { craft_id: "318", emoji: "🌿", label: "Seeweed" },
    position: { x: 0, y: 0 },
  },
  "319": {
    id: "",
    type: "custom",
    data: { craft_id: "319", emoji: "🐟", label: "Fish" },
    position: { x: 0, y: 0 },
  },
  "320": {
    id: "",
    type: "custom",
    data: { craft_id: "320", emoji: "⚓", label: "Grand Line" },
    position: { x: 0, y: 0 },
  },
  "321": {
    id: "",
    type: "custom",
    data: { craft_id: "321", emoji: "🌉", label: "Bridge" },
    position: { x: 0, y: 0 },
  },
  "322": {
    id: "",
    type: "custom",
    data: { craft_id: "322", emoji: "🚤", label: "Motorboat" },
    position: { x: 0, y: 0 },
  },
  "323": {
    id: "",
    type: "custom",
    data: { craft_id: "323", emoji: "🐙", label: "Octopus" },
    position: { x: 0, y: 0 },
  },
  "324": {
    id: "",
    type: "custom",
    data: { craft_id: "324", emoji: "🤖", label: "Robot" },
    position: { x: 0, y: 0 },
  },
  "325": {
    id: "",
    type: "custom",
    data: { craft_id: "325", emoji: "🏴‍☠️", label: "Camie" },
    position: { x: 0, y: 0 },
  },
  "326": {
    id: "",
    type: "custom",
    data: { craft_id: "326", emoji: "🌿", label: "Insect" },
    position: { x: 0, y: 0 },
  },
  "327": {
    id: "",
    type: "custom",
    data: { craft_id: "327", emoji: "🚇", label: "Tunnel" },
    position: { x: 0, y: 0 },
  },
  "328": {
    id: "",
    type: "custom",
    data: { craft_id: "328", emoji: "🍋", label: "Lemon" },
    position: { x: 0, y: 0 },
  },
  "329": {
    id: "",
    type: "custom",
    data: { craft_id: "329", emoji: "🐐", label: "Goat" },
    position: { x: 0, y: 0 },
  },
  "330": {
    id: "",
    type: "custom",
    data: { craft_id: "330", emoji: "🏴‍☠️", label: "Monet" },
    position: { x: 0, y: 0 },
  },
  "331": {
    id: "",
    type: "custom",
    data: { craft_id: "331", emoji: "🕷", label: "Spiderman" },
    position: { x: 0, y: 0 },
  },
  "332": {
    id: "",
    type: "custom",
    data: { craft_id: "332", emoji: "🚂", label: "Train" },
    position: { x: 0, y: 0 },
  },
  "333": {
    id: "",
    type: "custom",
    data: { craft_id: "333", emoji: "🍊", label: "Orange" },
    position: { x: 0, y: 0 },
  },
  "334": {
    id: "",
    type: "custom",
    data: { craft_id: "334", emoji: "🐪", label: "Camel" },
    position: { x: 0, y: 0 },
  },
  "335": {
    id: "",
    type: "custom",
    data: { craft_id: "335", emoji: "🏴‍☠️", label: "Crocodile" },
    position: { x: 0, y: 0 },
  },
  "336": {
    id: "",
    type: "custom",
    data: { craft_id: "336", emoji: "🥥", label: "Coconuts" },
    position: { x: 0, y: 0 },
  },
  "337": {
    id: "",
    type: "custom",
    data: { craft_id: "337", emoji: "🏨", label: "Hotel" },
    position: { x: 0, y: 0 },
  },
  "338": {
    id: "",
    type: "custom",
    data: { craft_id: "338", emoji: "🦑", label: "Squid" },
    position: { x: 0, y: 0 },
  },
  "339": {
    id: "",
    type: "custom",
    data: { craft_id: "339", emoji: "🦀", label: "Crab" },
    position: { x: 0, y: 0 },
  },
  "340": {
    id: "",
    type: "custom",
    data: { craft_id: "340", emoji: "🏴‍☠️", label: "Franky" },
    position: { x: 0, y: 0 },
  },
  "341": {
    id: "",
    type: "custom",
    data: { craft_id: "341", emoji: "🗿", label: "Iron Ingot" },
    position: { x: 0, y: 0 },
  },
  "342": {
    id: "",
    type: "custom",
    data: { craft_id: "342", emoji: "🏥", label: "Hospital" },
    position: { x: 0, y: 0 },
  },
  "343": {
    id: "",
    type: "custom",
    data: { craft_id: "343", emoji: "🍒", label: "Cherries" },
    position: { x: 0, y: 0 },
  },
  "344": {
    id: "",
    type: "custom",
    data: { craft_id: "344", emoji: "🦒", label: "Giraffe" },
    position: { x: 0, y: 0 },
  },
  "345": {
    id: "",
    type: "custom",
    data: { craft_id: "345", emoji: "🏴‍☠️", label: "Domino" },
    position: { x: 0, y: 0 },
  },
  "346": {
    id: "",
    type: "custom",
    data: { craft_id: "346", emoji: "⛓️", label: "Blockchain" },
    position: { x: 0, y: 0 },
  },
  "347": {
    id: "",
    type: "custom",
    data: { craft_id: "347", emoji: "🥢", label: "Chopsticks" },
    position: { x: 0, y: 0 },
  },
  "348": {
    id: "",
    type: "custom",
    data: { craft_id: "348", emoji: "🥧", label: "Pie" },
    position: { x: 0, y: 0 },
  },
  "349": {
    id: "",
    type: "custom",
    data: { craft_id: "349", emoji: "🐘", label: "Elephant" },
    position: { x: 0, y: 0 },
  },
  "350": {
    id: "",
    type: "custom",
    data: { craft_id: "350", emoji: "🏴‍☠️", label: "Nojiko" },
    position: { x: 0, y: 0 },
  },
  "351": {
    id: "",
    type: "custom",
    data: { craft_id: "351", emoji: "🍨", label: "Shake" },
    position: { x: 0, y: 0 },
  },
  "352": {
    id: "",
    type: "custom",
    data: { craft_id: "352", emoji: "🍴", label: "Fork And Knife" },
    position: { x: 0, y: 0 },
  },
  "353": {
    id: "",
    type: "custom",
    data: { craft_id: "353", emoji: "🍦", label: "Soft Ice Cream" },
    position: { x: 0, y: 0 },
  },
  "354": {
    id: "",
    type: "custom",
    data: { craft_id: "354", emoji: "🦏", label: "Rhinoceros" },
    position: { x: 0, y: 0 },
  },
  "355": {
    id: "",
    type: "custom",
    data: { craft_id: "355", emoji: "🏴‍☠️", label: "Shirahoshi" },
    position: { x: 0, y: 0 },
  },
  "356": {
    id: "",
    type: "custom",
    data: { craft_id: "356", emoji: "🦸‍♂️", label: "Ironman.Jr." },
    position: { x: 0, y: 0 },
  },
  "357": {
    id: "",
    type: "custom",
    data: { craft_id: "357", emoji: "🏺", label: "Amphora" },
    position: { x: 0, y: 0 },
  },
  "358": {
    id: "",
    type: "custom",
    data: { craft_id: "358", emoji: "🍄", label: "Mashroom" },
    position: { x: 0, y: 0 },
  },
  "359": {
    id: "",
    type: "custom",
    data: { craft_id: "359", emoji: "🦛", label: "Hippopotamus" },
    position: { x: 0, y: 0 },
  },
  "360": {
    id: "",
    type: "custom",
    data: { craft_id: "360", emoji: "🏴‍☠️", label: "Tashigi" },
    position: { x: 0, y: 0 },
  },
  "361": {
    id: "",
    type: "custom",
    data: { craft_id: "361", emoji: "🏋🏼‍♂️", label: "Small Danbel" },
    position: { x: 0, y: 0 },
  },
  "362": {
    id: "",
    type: "custom",
    data: { craft_id: "362", emoji: "🏟", label: "Stadium" },
    position: { x: 0, y: 0 },
  },
  "363": {
    id: "",
    type: "custom",
    data: { craft_id: "363", emoji: "🍓", label: "Strawberry" },
    position: { x: 0, y: 0 },
  },
  "364": {
    id: "",
    type: "custom",
    data: { craft_id: "364", emoji: "🐭", label: "Mouse" },
    position: { x: 0, y: 0 },
  },
  "365": {
    id: "",
    type: "custom",
    data: { craft_id: "365", emoji: "🏴‍☠️", label: "Edward Newgate" },
    position: { x: 0, y: 0 },
  },
  "366": {
    id: "",
    type: "custom",
    data: { craft_id: "366", emoji: "🗿", label: "Coal" },
    position: { x: 0, y: 0 },
  },
  "367": {
    id: "",
    type: "custom",
    data: { craft_id: "367", emoji: "🎪", label: "Circus Tent" },
    position: { x: 0, y: 0 },
  },
  "368": {
    id: "",
    type: "custom",
    data: { craft_id: "368", emoji: "🍅", label: "Tomato" },
    position: { x: 0, y: 0 },
  },
  "369": {
    id: "",
    type: "custom",
    data: { craft_id: "369", emoji: "🐀", label: "Rat" },
    position: { x: 0, y: 0 },
  },
  "370": {
    id: "",
    type: "custom",
    data: { craft_id: "370", emoji: "🏴‍☠️", label: "Jinbe" },
    position: { x: 0, y: 0 },
  },
  "371": {
    id: "",
    type: "custom",
    data: { craft_id: "371", emoji: "🏚️", label: "Room" },
    position: { x: 0, y: 0 },
  },
  "372": {
    id: "",
    type: "custom",
    data: { craft_id: "372", emoji: "🏢", label: "Office" },
    position: { x: 0, y: 0 },
  },
  "373": {
    id: "",
    type: "custom",
    data: { craft_id: "373", emoji: "🍫", label: "Chocolate" },
    position: { x: 0, y: 0 },
  },
  "374": {
    id: "",
    type: "custom",
    data: { craft_id: "374", emoji: "🐹", label: "Hamster" },
    position: { x: 0, y: 0 },
  },
  "375": {
    id: "",
    type: "custom",
    data: { craft_id: "375", emoji: "🏴‍☠️", label: "East Blue" },
    position: { x: 0, y: 0 },
  },
  "376": {
    id: "",
    type: "custom",
    data: { craft_id: "376", emoji: "☕", label: "Coffee Smoothie" },
    position: { x: 0, y: 0 },
  },
  "377": {
    id: "",
    type: "custom",
    data: { craft_id: "377", emoji: "🏤", label: "Postoffice" },
    position: { x: 0, y: 0 },
  },
  "378": {
    id: "",
    type: "custom",
    data: { craft_id: "378", emoji: "🎂", label: "Cake" },
    position: { x: 0, y: 0 },
  },
  "379": {
    id: "",
    type: "custom",
    data: { craft_id: "379", emoji: "🐇", label: "Rabbit" },
    position: { x: 0, y: 0 },
  },
  "380": {
    id: "",
    type: "custom",
    data: { craft_id: "380", emoji: "🏴‍☠️", label: "West Blue" },
    position: { x: 0, y: 0 },
  },
  "381": {
    id: "",
    type: "custom",
    data: { craft_id: "381", emoji: "🎆", label: "Fireworks" },
    position: { x: 0, y: 0 },
  },
  "382": {
    id: "",
    type: "custom",
    data: { craft_id: "382", emoji: "🏦", label: "Bank" },
    position: { x: 0, y: 0 },
  },
  "383": {
    id: "",
    type: "custom",
    data: { craft_id: "383", emoji: "🍙", label: "Rice Ball" },
    position: { x: 0, y: 0 },
  },
  "384": {
    id: "",
    type: "custom",
    data: { craft_id: "384", emoji: "🐿", label: "Chipmunk" },
    position: { x: 0, y: 0 },
  },
  "385": {
    id: "",
    type: "custom",
    data: { craft_id: "385", emoji: "🏴‍☠️", label: "North Blue" },
    position: { x: 0, y: 0 },
  },
  "386": {
    id: "",
    type: "custom",
    data: { craft_id: "386", emoji: "🏕️", label: "Tent" },
    position: { x: 0, y: 0 },
  },
  "387": {
    id: "",
    type: "custom",
    data: { craft_id: "387", emoji: "⛲", label: "Fountain" },
    position: { x: 0, y: 0 },
  },
  "388": {
    id: "",
    type: "custom",
    data: { craft_id: "388", emoji: "🍘", label: "Rice Cracker" },
    position: { x: 0, y: 0 },
  },
  "389": {
    id: "",
    type: "custom",
    data: { craft_id: "389", emoji: "🦔", label: "Hedgehog" },
    position: { x: 0, y: 0 },
  },
  "390": {
    id: "",
    type: "custom",
    data: { craft_id: "390", emoji: "🏴‍☠️", label: "South Blue" },
    position: { x: 0, y: 0 },
  },
  "391": {
    id: "",
    type: "custom",
    data: { craft_id: "391", emoji: "🗿", label: "Lapis Lazuli" },
    position: { x: 0, y: 0 },
  },
  "392": {
    id: "",
    type: "custom",
    data: { craft_id: "392", emoji: "🧱", label: "Brick" },
    position: { x: 0, y: 0 },
  },
  "393": {
    id: "",
    type: "custom",
    data: { craft_id: "393", emoji: "🥕", label: "Carrot" },
    position: { x: 0, y: 0 },
  },
  "394": {
    id: "",
    type: "custom",
    data: { craft_id: "394", emoji: "🦇", label: "Bat" },
    position: { x: 0, y: 0 },
  },
  "395": {
    id: "",
    type: "custom",
    data: { craft_id: "395", emoji: "🏴‍☠️", label: "Red Line" },
    position: { x: 0, y: 0 },
  },
  "396": {
    id: "",
    type: "custom",
    data: { craft_id: "396", emoji: "🛋🥔", label: "Couch Poteto" },
    position: { x: 0, y: 0 },
  },
  "397": {
    id: "",
    type: "custom",
    data: { craft_id: "397", emoji: "🏬", label: "Department Store" },
    position: { x: 0, y: 0 },
  },
  "398": {
    id: "",
    type: "custom",
    data: { craft_id: "398", emoji: "🍥", label: "Naruto" },
    position: { x: 0, y: 0 },
  },
  "399": {
    id: "",
    type: "custom",
    data: { craft_id: "399", emoji: "🐻", label: "Bear" },
    position: { x: 0, y: 0 },
  },
  "400": {
    id: "",
    type: "custom",
    data: { craft_id: "400", emoji: "🏴‍☠️", label: "Calm Belt" },
    position: { x: 0, y: 0 },
  },
  "401": {
    id: "",
    type: "custom",
    data: { craft_id: "401", emoji: "🗿", label: "Hawai" },
    position: { x: 0, y: 0 },
  },
  "402": {
    id: "",
    type: "custom",
    data: { craft_id: "402", emoji: "🗼", label: "Tokyo Tower" },
    position: { x: 0, y: 0 },
  },
  "403": {
    id: "",
    type: "custom",
    data: { craft_id: "403", emoji: "🥠", label: "Fortune Cookie" },
    position: { x: 0, y: 0 },
  },
  "404": {
    id: "",
    type: "custom",
    data: { craft_id: "404", emoji: "🐨", label: "Koala" },
    position: { x: 0, y: 0 },
  },
  "405": {
    id: "",
    type: "custom",
    data: { craft_id: "405", emoji: "🏴‍☠️", label: "Grand Line" },
    position: { x: 0, y: 0 },
  },
  "406": {
    id: "",
    type: "custom",
    data: { craft_id: "406", emoji: "🐞", label: "Lady Bug" },
    position: { x: 0, y: 0 },
  },
  "407": {
    id: "",
    type: "custom",
    data: { craft_id: "407", emoji: "🗽", label: "Statue Of Liberty" },
    position: { x: 0, y: 0 },
  },
  "408": {
    id: "",
    type: "custom",
    data: { craft_id: "408", emoji: "🍯", label: "Honey" },
    position: { x: 0, y: 0 },
  },
  "409": {
    id: "",
    type: "custom",
    data: { craft_id: "409", emoji: "🐼", label: "Panda" },
    position: { x: 0, y: 0 },
  },
  "410": {
    id: "",
    type: "custom",
    data: { craft_id: "410", emoji: "🏴‍☠️", label: "Paradise" },
    position: { x: 0, y: 0 },
  },
  "411": {
    id: "",
    type: "custom",
    data: { craft_id: "411", emoji: "💍", label: "Diamond Stone" },
    position: { x: 0, y: 0 },
  },
  "412": {
    id: "",
    type: "custom",
    data: { craft_id: "412", emoji: "💒", label: "Wedding" },
    position: { x: 0, y: 0 },
  },
  "413": {
    id: "",
    type: "custom",
    data: { craft_id: "413", emoji: "🍬", label: "Candy" },
    position: { x: 0, y: 0 },
  },
  "414": {
    id: "",
    type: "custom",
    data: { craft_id: "414", emoji: "🦘", label: "Kangaroo" },
    position: { x: 0, y: 0 },
  },
  "415": {
    id: "",
    type: "custom",
    data: { craft_id: "415", emoji: "🏴‍☠️", label: "New World" },
    position: { x: 0, y: 0 },
  },
  "416": {
    id: "",
    type: "custom",
    data: { craft_id: "416", emoji: "🗿", label: "Copper" },
    position: { x: 0, y: 0 },
  },
  "417": {
    id: "",
    type: "custom",
    data: { craft_id: "417", emoji: "🕌", label: "Mosque" },
    position: { x: 0, y: 0 },
  },
  "418": {
    id: "",
    type: "custom",
    data: { craft_id: "418", emoji: "🌮", label: "Taco" },
    position: { x: 0, y: 0 },
  },
  "419": {
    id: "",
    type: "custom",
    data: { craft_id: "419", emoji: "🦡", label: "Badger" },
    position: { x: 0, y: 0 },
  },
  "420": {
    id: "",
    type: "custom",
    data: { craft_id: "420", emoji: "🏴‍☠️", label: "Exact Location Unknown" },
    position: { x: 0, y: 0 },
  },
  "421": {
    id: "",
    type: "custom",
    data: { craft_id: "421", emoji: "🗝️", label: "Key Ring" },
    position: { x: 0, y: 0 },
  },
  "422": {
    id: "",
    type: "custom",
    data: { craft_id: "422", emoji: "⛪", label: "Church" },
    position: { x: 0, y: 0 },
  },
  "423": {
    id: "",
    type: "custom",
    data: { craft_id: "423", emoji: "🌯", label: "Burrito" },
    position: { x: 0, y: 0 },
  },
  "424": {
    id: "",
    type: "custom",
    data: { craft_id: "424", emoji: "🐾", label: "Paw Prints" },
    position: { x: 0, y: 0 },
  },
  "425": {
    id: "",
    type: "custom",
    data: { craft_id: "425", emoji: "🏴‍☠️", label: "Sky Ocean" },
    position: { x: 0, y: 0 },
  },
  "426": {
    id: "",
    type: "custom",
    data: { craft_id: "426", emoji: "🍡", label: "Mochi" },
    position: { x: 0, y: 0 },
  },
  "427": {
    id: "",
    type: "custom",
    data: { craft_id: "427", emoji: "🚥", label: "Traffic Light" },
    position: { x: 0, y: 0 },
  },
  "428": {
    id: "",
    type: "custom",
    data: { craft_id: "428", emoji: "🍭", label: "Lollipop" },
    position: { x: 0, y: 0 },
  },
  "429": {
    id: "",
    type: "custom",
    data: { craft_id: "429", emoji: "🦃", label: "Turkey" },
    position: { x: 0, y: 0 },
  },
  "430": {
    id: "",
    type: "custom",
    data: { craft_id: "430", emoji: "🏴‍☠️", label: "The White Sea" },
    position: { x: 0, y: 0 },
  },
  "431": {
    id: "",
    type: "custom",
    data: { craft_id: "431", emoji: "🤕", label: "Injury" },
    position: { x: 0, y: 0 },
  },
  "432": {
    id: "",
    type: "custom",
    data: { craft_id: "432", emoji: "🏭", label: "Factory" },
    position: { x: 0, y: 0 },
  },
  "433": {
    id: "",
    type: "custom",
    data: { craft_id: "433", emoji: "🍕", label: "Pizza" },
    position: { x: 0, y: 0 },
  },
  "434": {
    id: "",
    type: "custom",
    data: { craft_id: "434", emoji: "🐓", label: "Rooster" },
    position: { x: 0, y: 0 },
  },
  "435": {
    id: "",
    type: "custom",
    data: { craft_id: "435", emoji: "🏴‍☠️", label: "The White-White Sea" },
    position: { x: 0, y: 0 },
  },
  "436": {
    id: "",
    type: "custom",
    data: { craft_id: "436", emoji: "♨️", label: "Hakone" },
    position: { x: 0, y: 0 },
  },
  "437": {
    id: "",
    type: "custom",
    data: { craft_id: "437", emoji: "♨️", label: "Niseko" },
    position: { x: 0, y: 0 },
  },
  "438": {
    id: "",
    type: "custom",
    data: { craft_id: "438", emoji: "🌽", label: "Corn" },
    position: { x: 0, y: 0 },
  },
  "439": {
    id: "",
    type: "custom",
    data: { craft_id: "439", emoji: "🐣", label: "Hatching Chick" },
    position: { x: 0, y: 0 },
  },
  "440": {
    id: "",
    type: "custom",
    data: { craft_id: "440", emoji: "🏴‍☠️", label: "Sea Floor" },
    position: { x: 0, y: 0 },
  },
  "441": {
    id: "",
    type: "custom",
    data: { craft_id: "441", emoji: "🌿", label: "Leaflet" },
    position: { x: 0, y: 0 },
  },
  "442": {
    id: "",
    type: "custom",
    data: { craft_id: "442", emoji: "⛩", label: "Shrine" },
    position: { x: 0, y: 0 },
  },
  "443": {
    id: "",
    type: "custom",
    data: { craft_id: "443", emoji: "🍔", label: "Hamburger" },
    position: { x: 0, y: 0 },
  },
  "444": {
    id: "",
    type: "custom",
    data: { craft_id: "444", emoji: "🐤", label: "Baby Chick" },
    position: { x: 0, y: 0 },
  },
  "445": {
    id: "",
    type: "custom",
    data: { craft_id: "445", emoji: "🏴‍☠️", label: "The Moon" },
    position: { x: 0, y: 0 },
  },
  "446": {
    id: "",
    type: "custom",
    data: { craft_id: "446", emoji: "🚪", label: "Window" },
    position: { x: 0, y: 0 },
  },
  "447": {
    id: "",
    type: "custom",
    data: { craft_id: "447", emoji: "⛩", label: "Ise Jingu" },
    position: { x: 0, y: 0 },
  },
  "448": {
    id: "",
    type: "custom",
    data: { craft_id: "448", emoji: "🥒", label: "Cucumber" },
    position: { x: 0, y: 0 },
  },
  "449": {
    id: "",
    type: "custom",
    data: { craft_id: "449", emoji: "🦄", label: "Unicorn" },
    position: { x: 0, y: 0 },
  },
  "450": {
    id: "",
    type: "custom",
    data: { craft_id: "450", emoji: "🏴‍☠️", label: "Exact Location Unknown" },
    position: { x: 0, y: 0 },
  },
  "451": {
    id: "",
    type: "custom",
    data: { craft_id: "451", emoji: "🍵", label: "Matchapowder" },
    position: { x: 0, y: 0 },
  },
  "452": {
    id: "",
    type: "custom",
    data: { craft_id: "452", emoji: "🍵", label: "Matcha Cake" },
    position: { x: 0, y: 0 },
  },
  "453": {
    id: "",
    type: "custom",
    data: { craft_id: "453", emoji: "🥬", label: "Leafy Green" },
    position: { x: 0, y: 0 },
  },
  "454": {
    id: "",
    type: "custom",
    data: { craft_id: "454", emoji: "🦓", label: "Zebra" },
    position: { x: 0, y: 0 },
  },
  "455": {
    id: "",
    type: "custom",
    data: { craft_id: "455", emoji: "🏴‍☠️", label: "Non-Canon Locations" },
    position: { x: 0, y: 0 },
  },
  "456": {
    id: "",
    type: "custom",
    data: { craft_id: "456", emoji: "💋", label: "Kiss" },
    position: { x: 0, y: 0 },
  },
  "457": {
    id: "",
    type: "custom",
    data: { craft_id: "457", emoji: "😡", label: "Angry" },
    position: { x: 0, y: 0 },
  },
  "458": {
    id: "",
    type: "custom",
    data: { craft_id: "458", emoji: "🥜", label: "Peanuts" },
    position: { x: 0, y: 0 },
  },
  "459": {
    id: "",
    type: "custom",
    data: { craft_id: "459", emoji: "🦌", label: "Deer" },
    position: { x: 0, y: 0 },
  },
  "460": {
    id: "",
    type: "custom",
    data: { craft_id: "460", emoji: "🏴‍☠️", label: "Dressrosa" },
    position: { x: 0, y: 0 },
  },
  "461": {
    id: "",
    type: "custom",
    data: { craft_id: "461", emoji: "🎅🏻", label: "Santa" },
    position: { x: 0, y: 0 },
  },
  "462": {
    id: "",
    type: "custom",
    data: { craft_id: "462", emoji: "👻", label: "Ghost" },
    position: { x: 0, y: 0 },
  },
  "463": {
    id: "",
    type: "custom",
    data: { craft_id: "463", emoji: "🌰", label: "Chestnut" },
    position: { x: 0, y: 0 },
  },
  "464": {
    id: "",
    type: "custom",
    data: { craft_id: "464", emoji: "🐂", label: "Ox" },
    position: { x: 0, y: 0 },
  },
  "465": {
    id: "",
    type: "custom",
    data: { craft_id: "465", emoji: "🏴‍☠️", label: "Water 7" },
    position: { x: 0, y: 0 },
  },
  "466": {
    id: "",
    type: "custom",
    data: { craft_id: "466", emoji: "🦐", label: "Shrimp" },
    position: { x: 0, y: 0 },
  },
  "467": {
    id: "",
    type: "custom",
    data: { craft_id: "467", emoji: "📸", label: "Camera" },
    position: { x: 0, y: 0 },
  },
  "468": {
    id: "",
    type: "custom",
    data: { craft_id: "468", emoji: "🥨", label: "Pretzel" },
    position: { x: 0, y: 0 },
  },
  "469": {
    id: "",
    type: "custom",
    data: { craft_id: "469", emoji: "🐄", label: "Cow" },
    position: { x: 0, y: 0 },
  },
  "470": {
    id: "",
    type: "custom",
    data: { craft_id: "470", emoji: "🏴‍☠️", label: "Totto Land" },
    position: { x: 0, y: 0 },
  },
  "471": {
    id: "",
    type: "custom",
    data: { craft_id: "471", emoji: "🔘", label: "Rubber" },
    position: { x: 0, y: 0 },
  },
  "472": {
    id: "",
    type: "custom",
    data: { craft_id: "472", emoji: "🏎️💨", label: "Rasing Car" },
    position: { x: 0, y: 0 },
  },
  "473": {
    id: "",
    type: "custom",
    data: { craft_id: "473", emoji: "🌻", label: "Sunflower" },
    position: { x: 0, y: 0 },
  },
  "474": {
    id: "",
    type: "custom",
    data: { craft_id: "474", emoji: "🐒", label: "Monkey" },
    position: { x: 0, y: 0 },
  },
  "475": {
    id: "",
    type: "custom",
    data: { craft_id: "475", emoji: "🏴‍☠️", label: "Zou" },
    position: { x: 0, y: 0 },
  },
  "476": {
    id: "",
    type: "custom",
    data: { craft_id: "476", emoji: "🍜", label: "Noodle" },
    position: { x: 0, y: 0 },
  },
  "477": {
    id: "",
    type: "custom",
    data: { craft_id: "477", emoji: "🍜", label: "Ramen Bar" },
    position: { x: 0, y: 0 },
  },
  "478": {
    id: "",
    type: "custom",
    data: { craft_id: "478", emoji: "🍆", label: "Eggplant" },
    position: { x: 0, y: 0 },
  },
  "479": {
    id: "",
    type: "custom",
    data: { craft_id: "479", emoji: "🦍", label: "Gorilla" },
    position: { x: 0, y: 0 },
  },
  "480": {
    id: "",
    type: "custom",
    data: { craft_id: "480", emoji: "🏴‍☠️", label: "Little Garden" },
    position: { x: 0, y: 0 },
  },
  "481": {
    id: "",
    type: "custom",
    data: { craft_id: "481", emoji: "💪", label: "Power" },
    position: { x: 0, y: 0 },
  },
  "482": {
    id: "",
    type: "custom",
    data: { craft_id: "482", emoji: "👱", label: "Stone Man" },
    position: { x: 0, y: 0 },
  },
  "483": {
    id: "",
    type: "custom",
    data: { craft_id: "483", emoji: "🧀", label: "Cheese" },
    position: { x: 0, y: 0 },
  },
  "484": {
    id: "",
    type: "custom",
    data: { craft_id: "484", emoji: "🤺", label: "Fencing" },
    position: { x: 0, y: 0 },
  },
  "485": {
    id: "",
    type: "custom",
    data: { craft_id: "485", emoji: "🏴‍☠️", label: "Fishman Island" },
    position: { x: 0, y: 0 },
  },
  "486": {
    id: "",
    type: "custom",
    data: { craft_id: "486", emoji: "☔", label: "Rainly" },
    position: { x: 0, y: 0 },
  },
  "487": {
    id: "",
    type: "custom",
    data: { craft_id: "487", emoji: "☁", label: "Aws" },
    position: { x: 0, y: 0 },
  },
  "488": {
    id: "",
    type: "custom",
    data: { craft_id: "488", emoji: "🥓", label: "Bacon" },
    position: { x: 0, y: 0 },
  },
  "489": {
    id: "",
    type: "custom",
    data: { craft_id: "489", emoji: "🏇", label: "Horse Racing" },
    position: { x: 0, y: 0 },
  },
  "490": {
    id: "",
    type: "custom",
    data: { craft_id: "490", emoji: "🏴‍☠️", label: "Skypeia" },
    position: { x: 0, y: 0 },
  },
  "491": {
    id: "",
    type: "custom",
    data: { craft_id: "491", emoji: "🥔", label: "Potato Tips " },
    position: { x: 0, y: 0 },
  },
  "492": {
    id: "",
    type: "custom",
    data: { craft_id: "492", emoji: "🥔", label: "Potetohead" },
    position: { x: 0, y: 0 },
  },
  "493": {
    id: "",
    type: "custom",
    data: { craft_id: "493", emoji: "🍟", label: "French Fries" },
    position: { x: 0, y: 0 },
  },
  "494": {
    id: "",
    type: "custom",
    data: { craft_id: "494", emoji: "⛷", label: "Skier" },
    position: { x: 0, y: 0 },
  },
  "495": {
    id: "",
    type: "custom",
    data: { craft_id: "495", emoji: "🏴‍☠️", label: "Shell Town" },
    position: { x: 0, y: 0 },
  },
  "496": {
    id: "",
    type: "custom",
    data: { craft_id: "496", emoji: "🌲", label: "Wood" },
    position: { x: 0, y: 0 },
  },
  "497": {
    id: "",
    type: "custom",
    data: { craft_id: "497", emoji: "𓊳", label: "Tabel" },
    position: { x: 0, y: 0 },
  },
  "498": {
    id: "",
    type: "custom",
    data: { craft_id: "498", emoji: "🍇", label: "Grapes" },
    position: { x: 0, y: 0 },
  },
  "499": {
    id: "",
    type: "custom",
    data: { craft_id: "499", emoji: "🏂", label: "Snowboarder" },
    position: { x: 0, y: 0 },
  },
  "500": {
    id: "",
    type: "custom",
    data: { craft_id: "500", emoji: "🏴‍☠️", label: "Shimoshiki Village" },
    position: { x: 0, y: 0 },
  },
  "501": {
    id: "",
    type: "custom",
    data: { craft_id: "501", emoji: "🌶️", label: "Spice" },
    position: { x: 0, y: 0 },
  },
  "502": {
    id: "",
    type: "custom",
    data: { craft_id: "502", emoji: "🍛", label: "Spicy Curry" },
    position: { x: 0, y: 0 },
  },
  "503": {
    id: "",
    type: "custom",
    data: { craft_id: "503", emoji: "🌵", label: "Cactus" },
    position: { x: 0, y: 0 },
  },
  "504": {
    id: "",
    type: "custom",
    data: { craft_id: "504", emoji: "🏌", label: "Golfing" },
    position: { x: 0, y: 0 },
  },
  "505": {
    id: "",
    type: "custom",
    data: { craft_id: "505", emoji: "🏴‍☠️", label: "Orange Town" },
    position: { x: 0, y: 0 },
  },
  "506": {
    id: "",
    type: "custom",
    data: { craft_id: "506", emoji: "😝", label: "Akanbee" },
    position: { x: 0, y: 0 },
  },
  "507": {
    id: "",
    type: "custom",
    data: { craft_id: "507", emoji: "👧", label: "Newjeans" },
    position: { x: 0, y: 0 },
  },
  "508": {
    id: "",
    type: "custom",
    data: { craft_id: "508", emoji: "🍲", label: "Pod" },
    position: { x: 0, y: 0 },
  },
  "509": {
    id: "",
    type: "custom",
    data: { craft_id: "509", emoji: "🚴‍♂️", label: "Man Biking" },
    position: { x: 0, y: 0 },
  },
  "510": {
    id: "",
    type: "custom",
    data: { craft_id: "510", emoji: "🏴‍☠️", label: "Syrup Village" },
    position: { x: 0, y: 0 },
  },
  "511": {
    id: "",
    type: "custom",
    data: { craft_id: "511", emoji: "❄️", label: "Rockice" },
    position: { x: 0, y: 0 },
  },
  "512": {
    id: "",
    type: "custom",
    data: { craft_id: "512", emoji: "🌧", label: "Endless Rain" },
    position: { x: 0, y: 0 },
  },
  "513": {
    id: "",
    type: "custom",
    data: { craft_id: "513", emoji: "🍿", label: "Popcorn" },
    position: { x: 0, y: 0 },
  },
  "514": {
    id: "",
    type: "custom",
    data: { craft_id: "514", emoji: "🤸", label: "Person Cartwheeling" },
    position: { x: 0, y: 0 },
  },
  "515": {
    id: "",
    type: "custom",
    data: { craft_id: "515", emoji: "🏴‍☠️", label: "Arlong Park" },
    position: { x: 0, y: 0 },
  },
  "516": {
    id: "",
    type: "custom",
    data: { craft_id: "516", emoji: "👶🌱", label: "Baby Seed" },
    position: { x: 0, y: 0 },
  },
  "517": {
    id: "",
    type: "custom",
    data: { craft_id: "517", emoji: "👩‍⚖️", label: "Easy Delivery" },
    position: { x: 0, y: 0 },
  },
  "518": {
    id: "",
    type: "custom",
    data: { craft_id: "518", emoji: "🥫", label: "Canned Food" },
    position: { x: 0, y: 0 },
  },
  "519": {
    id: "",
    type: "custom",
    data: { craft_id: "519", emoji: "🤼", label: "People Wrestling" },
    position: { x: 0, y: 0 },
  },
  "520": {
    id: "",
    type: "custom",
    data: { craft_id: "520", emoji: "🏴‍☠️", label: "Cocoyashi Village" },
    position: { x: 0, y: 0 },
  },
  "521": {
    id: "",
    type: "custom",
    data: { craft_id: "521", emoji: "💰", label: "Bonus" },
    position: { x: 0, y: 0 },
  },
  "522": {
    id: "",
    type: "custom",
    data: { craft_id: "522", emoji: "🏫", label: "School" },
    position: { x: 0, y: 0 },
  },
  "523": {
    id: "",
    type: "custom",
    data: { craft_id: "523", emoji: "🌸", label: "Cherry Blossom" },
    position: { x: 0, y: 0 },
  },
  "524": {
    id: "",
    type: "custom",
    data: { craft_id: "524", emoji: "🤽", label: "Person Playing Water Polo" },
    position: { x: 0, y: 0 },
  },
  "525": {
    id: "",
    type: "custom",
    data: { craft_id: "525", emoji: "🏴‍☠️", label: "Gosa Village" },
    position: { x: 0, y: 0 },
  },
  "526": {
    id: "",
    type: "custom",
    data: { craft_id: "526", emoji: "🧸", label: "Bear Toy" },
    position: { x: 0, y: 0 },
  },
  "527": {
    id: "",
    type: "custom",
    data: { craft_id: "527", emoji: "🍼", label: "Baby High Chair" },
    position: { x: 0, y: 0 },
  },
  "528": {
    id: "",
    type: "custom",
    data: { craft_id: "528", emoji: "🍱", label: "Bento Box" },
    position: { x: 0, y: 0 },
  },
  "529": {
    id: "",
    type: "custom",
    data: { craft_id: "529", emoji: "🤾", label: "Person Playing Handball" },
    position: { x: 0, y: 0 },
  },
  "530": {
    id: "",
    type: "custom",
    data: { craft_id: "530", emoji: "🏴‍☠️", label: "Lougetown" },
    position: { x: 0, y: 0 },
  },
  "531": {
    id: "",
    type: "custom",
    data: { craft_id: "531", emoji: "🌪", label: "Sad" },
    position: { x: 0, y: 0 },
  },
  "532": {
    id: "",
    type: "custom",
    data: { craft_id: "532", emoji: "🌑", label: "Rolling Stones" },
    position: { x: 0, y: 0 },
  },
  "533": {
    id: "",
    type: "custom",
    data: { craft_id: "533", emoji: "🍧", label: "Oden" },
    position: { x: 0, y: 0 },
  },
  "534": {
    id: "",
    type: "custom",
    data: { craft_id: "534", emoji: "🧘", label: "Person Juggling" },
    position: { x: 0, y: 0 },
  },
  "535": {
    id: "",
    type: "custom",
    data: { craft_id: "535", emoji: "🏴‍☠️", label: "Lyneel" },
    position: { x: 0, y: 0 },
  },
  "536": {
    id: "",
    type: "custom",
    data: { craft_id: "536", emoji: "🌪", label: "Tornadocash" },
    position: { x: 0, y: 0 },
  },
  "537": {
    id: "",
    type: "custom",
    data: { craft_id: "537", emoji: "🌑", label: "New Moon" },
    position: { x: 0, y: 0 },
  },
  "538": {
    id: "",
    type: "custom",
    data: { craft_id: "538", emoji: "🍧", label: "Shaved Ice" },
    position: { x: 0, y: 0 },
  },
  "539": {
    id: "",
    type: "custom",
    data: { craft_id: "539", emoji: "🧘", label: "Person Yoga" },
    position: { x: 0, y: 0 },
  },
  "540": {
    id: "",
    type: "custom",
    data: { craft_id: "540", emoji: "🏴‍☠️", label: "Bliss Kingdom" },
    position: { x: 0, y: 0 },
  },
  "541": {
    id: "",
    type: "custom",
    data: { craft_id: "541", emoji: "🐔", label: "Yakitori" },
    position: { x: 0, y: 0 },
  },
  "542": {
    id: "",
    type: "custom",
    data: { craft_id: "542", emoji: "⭐", label: "Star" },
    position: { x: 0, y: 0 },
  },
  "543": {
    id: "",
    type: "custom",
    data: { craft_id: "543", emoji: "🧁", label: "Cupcake" },
    position: { x: 0, y: 0 },
  },
  "544": {
    id: "",
    type: "custom",
    data: { craft_id: "544", emoji: "🦟", label: "Mosquito" },
    position: { x: 0, y: 0 },
  },
  "545": {
    id: "",
    type: "custom",
    data: { craft_id: "545", emoji: "🏴‍☠️", label: "Karate Island" },
    position: { x: 0, y: 0 },
  },
  "546": {
    id: "",
    type: "custom",
    data: { craft_id: "546", emoji: "6️⃣9️⃣", label: "69" },
    position: { x: 0, y: 0 },
  },
  "547": {
    id: "",
    type: "custom",
    data: { craft_id: "547", emoji: "🎡", label: "Ferris Wheel" },
    position: { x: 0, y: 0 },
  },
  "548": {
    id: "",
    type: "custom",
    data: { craft_id: "548", emoji: "🌹", label: "Rose" },
    position: { x: 0, y: 0 },
  },
  "549": {
    id: "",
    type: "custom",
    data: { craft_id: "549", emoji: "🦖", label: "T-Rex" },
    position: { x: 0, y: 0 },
  },
  "550": {
    id: "",
    type: "custom",
    data: { craft_id: "550", emoji: "🏴‍☠️", label: "Saint Reia" },
    position: { x: 0, y: 0 },
  },
  "551": {
    id: "",
    type: "custom",
    data: { craft_id: "551", emoji: "🥚", label: "Scrambled Eggs" },
    position: { x: 0, y: 0 },
  },
  "552": {
    id: "",
    type: "custom",
    data: { craft_id: "552", emoji: "🌟", label: "Glowing Star" },
    position: { x: 0, y: 0 },
  },
  "553": {
    id: "",
    type: "custom",
    data: { craft_id: "553", emoji: "🌺", label: "Hibiscus" },
    position: { x: 0, y: 0 },
  },
  "554": {
    id: "",
    type: "custom",
    data: { craft_id: "554", emoji: "🦚", label: "Peacock" },
    position: { x: 0, y: 0 },
  },
  "555": {
    id: "",
    type: "custom",
    data: { craft_id: "555", emoji: "🏴‍☠️", label: "Ohara" },
    position: { x: 0, y: 0 },
  },
  "556": {
    id: "",
    type: "custom",
    data: { craft_id: "556", emoji: "🤑", label: "Jackpot" },
    position: { x: 0, y: 0 },
  },
  "557": {
    id: "",
    type: "custom",
    data: { craft_id: "557", emoji: "🌠", label: "Shooting Star" },
    position: { x: 0, y: 0 },
  },
  "558": {
    id: "",
    type: "custom",
    data: { craft_id: "558", emoji: "🍶", label: "Sake" },
    position: { x: 0, y: 0 },
  },
  "559": {
    id: "",
    type: "custom",
    data: { craft_id: "559", emoji: "🐢", label: "Turtle" },
    position: { x: 0, y: 0 },
  },
  "560": {
    id: "",
    type: "custom",
    data: { craft_id: "560", emoji: "🏴‍☠️", label: "Baratie" },
    position: { x: 0, y: 0 },
  },
  "561": {
    id: "",
    type: "custom",
    data: { craft_id: "561", emoji: "⭐", label: "Superstar" },
    position: { x: 0, y: 0 },
  },
  "562": {
    id: "",
    type: "custom",
    data: { craft_id: "562", emoji: "🌌", label: "Milky Way" },
    position: { x: 0, y: 0 },
  },
  "563": {
    id: "",
    type: "custom",
    data: { craft_id: "563", emoji: "🥃", label: "Whiskey" },
    position: { x: 0, y: 0 },
  },
  "564": {
    id: "",
    type: "custom",
    data: { craft_id: "564", emoji: "🚶", label: "Vitalik Buterin" },
    position: { x: 0, y: 0 },
  },
  "565": {
    id: "",
    type: "custom",
    data: { craft_id: "565", emoji: "🏴‍☠️", label: "Nanohana" },
    position: { x: 0, y: 0 },
  },
};

export const defaultRecipeMap: { [key: string]: string } = {
  "1_1": "6",
  "1_2": "7",
  "1_3": "8",
  "1_4": "9",
  "1_5": "10",
  "2_2": "11",
  "2_3": "12",
  "2_4": "13",
  "2_5": "14",
  "3_3": "15",
  "3_4": "16",
  "3_5": "17",
  "4_4": "18",
  "4_5": "19",
  "5_5": "20",
  "1_6": "21",
  "2_6": "22",
  "3_6": "23",
  "4_6": "24",
  "5_6": "25",
  "1_7": "26",
  "2_7": "27",
  "3_7": "28",
  "4_7": "29",
  "5_7": "30",
  "1_8": "31",
  "2_8": "32",
  "3_8": "33",
  "4_8": "34",
  "5_8": "35",
  "1_9": "36",
  "2_9": "37",
  "3_9": "38",
  "4_9": "39",
  "5_9": "40",
  "1_10": "41",
  "2_10": "42",
  "3_10": "43",
  "4_10": "44",
  "5_10": "45",
  "1_11": "46",
  "2_11": "47",
  "3_11": "48",
  "4_11": "49",
  "5_11": "50",
  "1_12": "51",
  "2_12": "52",
  "3_12": "53",
  "4_12": "54",
  "5_12": "55",
  "1_13": "56",
  "2_13": "57",
  "3_13": "58",
  "4_13": "59",
  "5_13": "60",
  "1_14": "61",
  "2_14": "62",
  "3_14": "63",
  "4_14": "64",
  "5_14": "65",
  "1_15": "66",
  "2_15": "67",
  "3_15": "68",
  "4_15": "69",
  "5_15": "70",
  "1_16": "71",
  "2_16": "72",
  "3_16": "73",
  "4_16": "74",
  "5_16": "75",
  "1_17": "76",
  "2_17": "77",
  "3_17": "78",
  "4_17": "79",
  "5_17": "80",
  "1_18": "81",
  "2_18": "82",
  "3_18": "83",
  "4_18": "84",
  "5_18": "85",
  "1_19": "86",
  "2_19": "87",
  "3_19": "88",
  "4_19": "89",
  "5_19": "90",
  "1_20": "91",
  "2_20": "92",
  "3_20": "93",
  "4_20": "94",
  "5_20": "95",
  "6_6": "96",
  "6_7": "97",
  "6_8": "98",
  "6_9": "99",
  "6_10": "100",
  "6_11": "101",
  "6_12": "102",
  "6_13": "103",
  "6_14": "104",
  "6_15": "105",
  "6_16": "106",
  "6_17": "107",
  "6_18": "108",
  "6_19": "109",
  "6_20": "110",
  "7_7": "111",
  "7_8": "112",
  "7_9": "113",
  "7_10": "114",
  "7_11": "115",
  "7_12": "116",
  "7_13": "117",
  "7_14": "118",
  "7_15": "119",
  "7_16": "120",
  "7_17": "121",
  "7_18": "122",
  "7_19": "123",
  "7_20": "124",
  "8_8": "125",
  "8_9": "126",
  "8_10": "127",
  "8_11": "128",
  "8_12": "129",
  "8_13": "130",
  "8_14": "131",
  "8_15": "132",
  "8_16": "133",
  "8_17": "134",
  "8_18": "135",
  "8_19": "136",
  "8_20": "137",
  "9_9": "138",
  "9_10": "139",
  "9_11": "140",
  "9_12": "141",
  "9_13": "142",
  "9_14": "143",
  "9_15": "144",
  "9_16": "145",
  "9_17": "146",
  "9_18": "147",
  "9_19": "148",
  "9_20": "149",
  "10_10": "150",
  "10_11": "151",
  "10_12": "152",
  "10_13": "153",
  "10_14": "154",
  "10_15": "155",
  "10_16": "156",
  "10_17": "157",
  "10_18": "158",
  "10_19": "159",
  "10_20": "160",
  "11_11": "161",
  "11_12": "162",
  "11_13": "163",
  "11_14": "164",
  "11_15": "165",
  "11_16": "166",
  "11_17": "167",
  "11_18": "168",
  "11_19": "169",
  "11_20": "170",
  "12_12": "171",
  "12_13": "172",
  "12_14": "173",
  "12_15": "174",
  "12_16": "175",
  "12_17": "176",
  "12_18": "177",
  "12_19": "178",
  "12_20": "179",
  "13_13": "180",
  "13_14": "181",
  "13_15": "182",
  "13_16": "183",
  "13_17": "184",
  "13_18": "185",
  "13_19": "186",
  "13_20": "187",
  "14_14": "188",
  "14_15": "189",
  "14_16": "190",
  "14_17": "191",
  "14_18": "192",
  "14_19": "193",
  "14_20": "194",
  "15_15": "195",
  "15_16": "196",
  "15_17": "197",
  "15_18": "198",
  "15_19": "199",
  "15_20": "200",
  "16_16": "201",
  "16_17": "202",
  "16_18": "203",
  "16_19": "204",
  "16_20": "205",
  "17_17": "206",
  "17_18": "207",
  "17_19": "208",
  "17_20": "209",
  "18_18": "210",
  "18_19": "211",
  "18_20": "212",
  "19_19": "213",
  "19_20": "214",
  "20_20": "215",
  "1_21": "216",
  "2_21": "217",
  "3_21": "218",
  "4_21": "219",
  "5_21": "220",
  "1_22": "221",
  "2_22": "222",
  "3_22": "223",
  "4_22": "224",
  "5_22": "225",
  "1_23": "226",
  "2_23": "227",
  "3_23": "228",
  "4_23": "229",
  "5_23": "230",
  "1_24": "231",
  "2_24": "232",
  "3_24": "233",
  "4_24": "234",
  "5_24": "235",
  "1_25": "236",
  "2_25": "237",
  "3_25": "238",
  "4_25": "239",
  "5_25": "240",
  "1_26": "241",
  "2_26": "242",
  "3_26": "243",
  "4_26": "244",
  "5_26": "245",
  "1_27": "246",
  "2_27": "247",
  "3_27": "248",
  "4_27": "249",
  "5_27": "250",
  "1_28": "251",
  "2_28": "252",
  "3_28": "253",
  "4_28": "254",
  "5_28": "255",
  "1_29": "256",
  "2_29": "257",
  "3_29": "258",
  "4_29": "259",
  "5_29": "260",
  "1_30": "261",
  "2_30": "262",
  "3_30": "263",
  "4_30": "264",
  "5_30": "265",
  "1_31": "266",
  "2_31": "267",
  "3_31": "268",
  "4_31": "269",
  "5_31": "270",
  "1_32": "271",
  "2_32": "272",
  "3_32": "273",
  "4_32": "274",
  "5_32": "275",
  "1_33": "276",
  "2_33": "277",
  "3_33": "278",
  "4_33": "279",
  "5_33": "280",
  "1_34": "281",
  "2_34": "282",
  "3_34": "283",
  "4_34": "284",
  "5_34": "285",
  "1_35": "286",
  "2_35": "287",
  "3_35": "288",
  "4_35": "289",
  "5_35": "290",
  "1_36": "291",
  "2_36": "292",
  "3_36": "293",
  "4_36": "294",
  "5_36": "295",
  "1_37": "296",
  "2_37": "297",
  "3_37": "298",
  "4_37": "299",
  "5_37": "300",
  "1_38": "301",
  "2_38": "302",
  "3_38": "303",
  "4_38": "304",
  "5_38": "305",
  "1_39": "306",
  "2_39": "307",
  "3_39": "308",
  "4_39": "309",
  "5_39": "310",
  "1_40": "311",
  "2_40": "312",
  "3_40": "313",
  "4_40": "314",
  "5_40": "315",
  "1_41": "316",
  "2_41": "317",
  "3_41": "318",
  "4_41": "319",
  "5_41": "320",
  "1_42": "321",
  "2_42": "322",
  "3_42": "323",
  "4_42": "324",
  "5_42": "325",
  "1_43": "326",
  "2_43": "327",
  "3_43": "328",
  "4_43": "329",
  "5_43": "330",
  "1_44": "331",
  "2_44": "332",
  "3_44": "333",
  "4_44": "334",
  "5_44": "335",
  "1_45": "336",
  "2_45": "337",
  "3_45": "338",
  "4_45": "339",
  "5_45": "340",
  "1_46": "341",
  "2_46": "342",
  "3_46": "343",
  "4_46": "344",
  "5_46": "345",
  "1_47": "346",
  "2_47": "347",
  "3_47": "348",
  "4_47": "349",
  "5_47": "350",
  "1_48": "351",
  "2_48": "352",
  "3_48": "353",
  "4_48": "354",
  "5_48": "355",
  "1_49": "356",
  "2_49": "357",
  "3_49": "358",
  "4_49": "359",
  "5_49": "360",
  "1_50": "361",
  "2_50": "362",
  "3_50": "363",
  "4_50": "364",
  "5_50": "365",
  "1_51": "366",
  "2_51": "367",
  "3_51": "368",
  "4_51": "369",
  "5_51": "370",
  "1_52": "371",
  "2_52": "372",
  "3_52": "373",
  "4_52": "374",
  "5_52": "375",
  "1_53": "376",
  "2_53": "377",
  "3_53": "378",
  "4_53": "379",
  "5_53": "380",
  "1_54": "381",
  "2_54": "382",
  "3_54": "383",
  "4_54": "384",
  "5_54": "385",
  "1_55": "386",
  "2_55": "387",
  "3_55": "388",
  "4_55": "389",
  "5_55": "390",
  "1_56": "391",
  "2_56": "392",
  "3_56": "393",
  "4_56": "394",
  "5_56": "395",
  "1_57": "396",
  "2_57": "397",
  "3_57": "398",
  "4_57": "399",
  "5_57": "400",
  "1_58": "401",
  "2_58": "402",
  "3_58": "403",
  "4_58": "404",
  "5_58": "405",
  "1_59": "406",
  "2_59": "407",
  "3_59": "408",
  "4_59": "409",
  "5_59": "410",
  "1_60": "411",
  "2_60": "412",
  "3_60": "413",
  "4_60": "414",
  "5_60": "415",
  "1_61": "416",
  "2_61": "417",
  "3_61": "418",
  "4_61": "419",
  "5_61": "420",
  "1_62": "421",
  "2_62": "422",
  "3_62": "423",
  "4_62": "424",
  "5_62": "425",
  "1_63": "426",
  "2_63": "427",
  "3_63": "428",
  "4_63": "429",
  "5_63": "430",
  "1_64": "431",
  "2_64": "432",
  "3_64": "433",
  "4_64": "434",
  "5_64": "435",
  "1_65": "436",
  "2_65": "437",
  "3_65": "438",
  "4_65": "439",
  "5_65": "440",
  "1_66": "441",
  "2_66": "442",
  "3_66": "443",
  "4_66": "444",
  "5_66": "445",
  "1_67": "446",
  "2_67": "447",
  "3_67": "448",
  "4_67": "449",
  "5_67": "450",
  "1_68": "451",
  "2_68": "452",
  "3_68": "453",
  "4_68": "454",
  "5_68": "455",
  "1_69": "456",
  "2_69": "457",
  "3_69": "458",
  "4_69": "459",
  "5_69": "460",
  "1_70": "461",
  "2_70": "462",
  "3_70": "463",
  "4_70": "464",
  "5_70": "465",
  "1_71": "466",
  "2_71": "467",
  "3_71": "468",
  "4_71": "469",
  "5_71": "470",
  "1_72": "471",
  "2_72": "472",
  "3_72": "473",
  "4_72": "474",
  "5_72": "475",
  "1_73": "476",
  "2_73": "477",
  "3_73": "478",
  "4_73": "479",
  "5_73": "480",
  "1_74": "481",
  "2_74": "482",
  "3_74": "483",
  "4_74": "484",
  "5_74": "485",
  "1_75": "486",
  "2_75": "487",
  "3_75": "488",
  "4_75": "489",
  "5_75": "490",
  "1_76": "491",
  "2_76": "492",
  "3_76": "493",
  "4_76": "494",
  "5_76": "495",
  "1_77": "496",
  "2_77": "497",
  "3_77": "498",
  "4_77": "499",
  "5_77": "500",
  "1_78": "501",
  "2_78": "502",
  "3_78": "503",
  "4_78": "504",
  "5_78": "505",
  "1_79": "506",
  "2_79": "507",
  "3_79": "508",
  "4_79": "509",
  "5_79": "510",
  "1_80": "511",
  "2_80": "512",
  "3_80": "513",
  "4_80": "514",
  "5_80": "515",
  "1_81": "516",
  "2_81": "517",
  "3_81": "518",
  "4_81": "519",
  "5_81": "520",
  "1_82": "521",
  "2_82": "522",
  "3_82": "523",
  "4_82": "524",
  "5_82": "525",
  "1_83": "526",
  "2_83": "527",
  "3_83": "528",
  "4_83": "529",
  "5_83": "530",
  "1_84": "531",
  "2_84": "532",
  "3_84": "533",
  "4_84": "534",
  "5_84": "535",
  "1_85": "536",
  "2_85": "537",
  "3_85": "538",
  "4_85": "539",
  "5_85": "540",
  "1_86": "541",
  "2_86": "542",
  "3_86": "543",
  "4_86": "544",
  "5_86": "545",
  "1_87": "546",
  "2_87": "547",
  "3_87": "548",
  "4_87": "549",
  "5_87": "550",
  "1_88": "551",
  "2_88": "552",
  "3_88": "553",
  "4_88": "554",
  "5_88": "555",
  "1_89": "556",
  "2_89": "557",
  "3_89": "558",
  "4_89": "559",
  "5_89": "560",
  "1_90": "561",
  "2_90": "562",
  "3_90": "563",
  "4_90": "564",
  "5_90": "565",
};
export const ZetaTokenForTestAbi: any = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_imageText",
        type: "string",
      },
    ],
    name: "setMetadataAndMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];
export const ZetaRecipeAbi: any = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    name: "BLAST",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "contract IBlast" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "RECIPE_CREATE_POINT",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      { name: "to", type: "address", internalType: "address" },
      { name: "tokenId", type: "uint256", internalType: "uint256" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "claimMyContractsGas",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "generateImage",
    inputs: [
      { name: "_imageText", type: "string", internalType: "string" },
      { name: "_creator", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "getApproved",
    inputs: [{ name: "tokenId", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isApprovedForAll",
    inputs: [
      { name: "owner", type: "address", internalType: "address" },
      { name: "operator", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isMetadataExists",
    inputs: [{ name: "_id", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "metadatas",
    inputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    outputs: [
      { name: "name", type: "string", internalType: "string" },
      { name: "imageText", type: "string", internalType: "string" },
      { name: "creator", type: "address", internalType: "address" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ownerOf",
    inputs: [{ name: "tokenId", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "paused",
    inputs: [],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "recipePoints",
    inputs: [{ name: "", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "recipes",
    inputs: [
      { name: "", type: "uint256", internalType: "uint256" },
      { name: "", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
      { name: "tokenId", type: "uint256", internalType: "uint256" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
      { name: "tokenId", type: "uint256", internalType: "uint256" },
      { name: "data", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setApprovalForAll",
    inputs: [
      { name: "operator", type: "address", internalType: "address" },
      { name: "approved", type: "bool", internalType: "bool" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setDefaultMetadata",
    inputs: [
      { name: "_id", type: "uint256", internalType: "uint256" },
      { name: "_name", type: "string", internalType: "string" },
      { name: "_imageText", type: "string", internalType: "string" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setDefaultMetadatas",
    inputs: [
      { name: "_id", type: "uint256[]", internalType: "uint256[]" },
      { name: "_name", type: "string[]", internalType: "string[]" },
      { name: "_imageText", type: "string[]", internalType: "string[]" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setDefaultRecipe",
    inputs: [
      { name: "_id", type: "uint256", internalType: "uint256" },
      { name: "_idA", type: "uint256", internalType: "uint256" },
      { name: "_idB", type: "uint256", internalType: "uint256" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setRecipe",
    inputs: [
      { name: "_id", type: "uint256", internalType: "uint256" },
      { name: "_name", type: "string", internalType: "string" },
      { name: "_imageText", type: "string", internalType: "string" },
      { name: "_idA", type: "uint256", internalType: "uint256" },
      { name: "_idB", type: "uint256", internalType: "uint256" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [{ name: "interfaceId", type: "bytes4", internalType: "bytes4" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "togglePause",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "tokenURI",
    inputs: [{ name: "_id", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
      { name: "tokenId", type: "uint256", internalType: "uint256" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [{ name: "newOwner", type: "address", internalType: "address" }],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ApprovalForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      { name: "approved", type: "bool", indexed: false, internalType: "bool" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Paused",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RecipePoint",
    inputs: [
      { name: "_to", type: "address", indexed: true, internalType: "address" },
      {
        name: "_point",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      { name: "from", type: "address", indexed: true, internalType: "address" },
      { name: "to", type: "address", indexed: true, internalType: "address" },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Unpaused",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ERC721IncorrectOwner",
    inputs: [
      { name: "sender", type: "address", internalType: "address" },
      { name: "tokenId", type: "uint256", internalType: "uint256" },
      { name: "owner", type: "address", internalType: "address" },
    ],
  },
  {
    type: "error",
    name: "ERC721InsufficientApproval",
    inputs: [
      { name: "operator", type: "address", internalType: "address" },
      { name: "tokenId", type: "uint256", internalType: "uint256" },
    ],
  },
  {
    type: "error",
    name: "ERC721InvalidApprover",
    inputs: [{ name: "approver", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC721InvalidOperator",
    inputs: [{ name: "operator", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC721InvalidOwner",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC721InvalidReceiver",
    inputs: [{ name: "receiver", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC721InvalidSender",
    inputs: [{ name: "sender", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC721NonexistentToken",
    inputs: [{ name: "tokenId", type: "uint256", internalType: "uint256" }],
  },
  { type: "error", name: "EnforcedPause", inputs: [] },
  { type: "error", name: "ExpectedPause", inputs: [] },
  {
    type: "error",
    name: "OwnableInvalidOwner",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "OwnableUnauthorizedAccount",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "StringsInsufficientHexLength",
    inputs: [
      { name: "value", type: "uint256", internalType: "uint256" },
      { name: "length", type: "uint256", internalType: "uint256" },
    ],
  },
];
export const ZetaTokenAbi: any = [
  {
    type: "constructor",
    inputs: [{ name: "_recipe", type: "address", internalType: "address" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "BLAST",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "contract IBlast" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "CAP",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MINT_POINT",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "RECIPE_CREATOR_POINT",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "REFFERAL_RECIPE_CREATOR_POINT",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      { name: "account", type: "address", internalType: "address" },
      { name: "id", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "balanceOfBatch",
    inputs: [
      { name: "accounts", type: "address[]", internalType: "address[]" },
      { name: "ids", type: "uint256[]", internalType: "uint256[]" },
    ],
    outputs: [{ name: "", type: "uint256[]", internalType: "uint256[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "claimMyContractsGas",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "exists",
    inputs: [{ name: "id", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "generateImage",
    inputs: [{ name: "_imageText", type: "string", internalType: "string" }],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "isApprovedForAll",
    inputs: [
      { name: "account", type: "address", internalType: "address" },
      { name: "operator", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      { name: "_to", type: "address", internalType: "address" },
      { name: "_id", type: "uint256", internalType: "uint256" },
      { name: "_idA", type: "uint256", internalType: "uint256" },
      { name: "_idB", type: "uint256", internalType: "uint256" },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "mintPoints",
    inputs: [{ name: "", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "recipe",
    inputs: [],
    outputs: [
      { name: "", type: "address", internalType: "contract IZetaRecipe" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "recipeCreatorPoints",
    inputs: [{ name: "", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "refferalRecipeCreatorPoints",
    inputs: [{ name: "", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeBatchTransferFrom",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
      { name: "ids", type: "uint256[]", internalType: "uint256[]" },
      { name: "values", type: "uint256[]", internalType: "uint256[]" },
      { name: "data", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
      { name: "id", type: "uint256", internalType: "uint256" },
      { name: "value", type: "uint256", internalType: "uint256" },
      { name: "data", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setApprovalForAll",
    inputs: [
      { name: "operator", type: "address", internalType: "address" },
      { name: "approved", type: "bool", internalType: "bool" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [{ name: "interfaceId", type: "bytes4", internalType: "bytes4" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [{ name: "id", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [{ name: "newOwner", type: "address", internalType: "address" }],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "uri",
    inputs: [{ name: "_id", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "ApprovalForAll",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      { name: "approved", type: "bool", indexed: false, internalType: "bool" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MintPoint",
    inputs: [
      { name: "_to", type: "address", indexed: true, internalType: "address" },
      {
        name: "_point",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RecipeCreatorPoint",
    inputs: [
      { name: "_to", type: "address", indexed: true, internalType: "address" },
      {
        name: "_point",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RefferalRecipeCreatorPoint",
    inputs: [
      { name: "_to", type: "address", indexed: true, internalType: "address" },
      {
        name: "_point",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransferBatch",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      { name: "from", type: "address", indexed: true, internalType: "address" },
      { name: "to", type: "address", indexed: true, internalType: "address" },
      {
        name: "ids",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
      {
        name: "values",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransferSingle",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      { name: "from", type: "address", indexed: true, internalType: "address" },
      { name: "to", type: "address", indexed: true, internalType: "address" },
      { name: "id", type: "uint256", indexed: false, internalType: "uint256" },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "URI",
    inputs: [
      { name: "value", type: "string", indexed: false, internalType: "string" },
      { name: "id", type: "uint256", indexed: true, internalType: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ERC1155InsufficientBalance",
    inputs: [
      { name: "sender", type: "address", internalType: "address" },
      { name: "balance", type: "uint256", internalType: "uint256" },
      { name: "needed", type: "uint256", internalType: "uint256" },
      { name: "tokenId", type: "uint256", internalType: "uint256" },
    ],
  },
  {
    type: "error",
    name: "ERC1155InvalidApprover",
    inputs: [{ name: "approver", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC1155InvalidArrayLength",
    inputs: [
      { name: "idsLength", type: "uint256", internalType: "uint256" },
      { name: "valuesLength", type: "uint256", internalType: "uint256" },
    ],
  },
  {
    type: "error",
    name: "ERC1155InvalidOperator",
    inputs: [{ name: "operator", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC1155InvalidReceiver",
    inputs: [{ name: "receiver", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC1155InvalidSender",
    inputs: [{ name: "sender", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ERC1155MissingApprovalForAll",
    inputs: [
      { name: "operator", type: "address", internalType: "address" },
      { name: "owner", type: "address", internalType: "address" },
    ],
  },
  {
    type: "error",
    name: "OwnableInvalidOwner",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "OwnableUnauthorizedAccount",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
  },
];
export const addresses = {
  // ZetaTokenForTest: "0x4b3DeA2232fB8E5419CfacF9f633bf638267699a",
  ZetaRecipe: "0x5df8207b2AC3345E2DdDb73DCe8d13838F22CADf",
  ZetaToken: "0x05421Fe1993581536da827f5D5C73Bb667b55dd5",
};
/* eslint-disable react/no-unescaped-entities */
import React, { useState, useEffect } from "react";
import { Node } from "reactflow";
import EmojiPicker, { EmojiClickData } from "emoji-picker-react";
import { useToast } from "@/components/ui/use-toast";
import LoadingIndicator from "components/LoadingIndicator";
import {
  useAccount,
  useWriteContract,
  useReadContract,
  useReadContracts,
  useWaitForTransactionReceipt,
} from "wagmi";
import { parseEther } from "viem";
import { ConnectWallet } from "components/Button/ConnectWallet";
import { ZetaTokenAbi } from "constants/ZetaTokenAbi";
import { addresses } from "constants/addresses";

const FEE = "0.000025";
interface FooterMintProps {
  node: Node | undefined;
  nodeA: Node | undefined;
  nodeB: Node | undefined;
}

const FooterMint: React.FC<FooterMintProps> = ({ node, nodeA, nodeB }) => {
  const { address, isConnected } = useAccount();
  const { data: hash, isPending, error, writeContract } = useWriteContract();
  const [sum, setSum] = useState(0);
  const [minted, setMinted] = useState(false);
  const { toast } = useToast();

  const ZetaTokenContract = {
    address: addresses.ZetaToken as `0x${string}`,
    abi: ZetaTokenAbi,
  } as const;

  const results = useReadContracts({
    contracts: [
      {
        ...ZetaTokenContract,
        functionName: "balanceOf",
        args: [address as `0x${string}`, BigInt(node!.data.craft_id)],
      },
      {
        ...ZetaTokenContract,
        functionName: "totalSupply",
        args: [BigInt(node!.data.craft_id)],
      },
    ],
  });
  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash,
    });
  useEffect(() => {
    if (results.isSuccess) {
      const resultBalance = results.data[0].result;
      setMinted(
        resultBalance != null && parseInt(resultBalance.toString()) > 0
      );

      const resultTotalSupply = results.data[1].result;
      const sum =
        resultTotalSupply != null ? parseInt(resultTotalSupply.toString()) : 0;
      setSum(sum);
    }
  }, [results, hash]);

  useEffect(() => {
    if (isConfirmed) {
      toast({
        title: "Transaction confirmed",
        description: hash,
      });
      setMinted(true);
    }
  }, [isConfirmed, hash, toast]);

  const writeMint = async () => {
    writeContract({
      address: addresses.ZetaToken as `0x${string}`,
      abi: ZetaTokenAbi,
      functionName: "mint",
      args: [
        address as `0x${string}`,
        BigInt(node!.data.craft_id),
        BigInt(nodeA?.data.craft_id),
        BigInt(nodeB?.data.craft_id),
      ],
      value: parseEther(FEE),
    });
  };

  if (!node) return null;

  return (
    <>
      <div className="left-12 inset-x-0 bottom-0 bg-white p-4 flex items-center justify-center z-10 mx-auto">
        <p className="mx-2 font-bold">
          {`${sum} minted`}
        </p>
        <div className="mx-2 items-center border border-gray-100 bg-gray-100 rounded-md">
          {node.data.label ? (
            <div className="p-2">
              <span className="font-bold">{`${node.data.emoji}${node.data.label}`}</span>
            </div>
          ) : null}
        </div>
        <p className="mx-2">{" -> "}</p>
        {isConnected ? (
          <button
            disabled={minted || isPending || isConfirming}
            className={`${
              !minted
                ? "bg-blue hover:bg-blueHover"
                : "bg-gray-400 hover:bg-gray-400 cursor-not-allowed"
            } mx-2 text-white font-bold py-2 px-4 rounded m-1`}
            onClick={writeMint}
          >
            {isPending || isConfirming ? (
              <LoadingIndicator />
            ) : minted ? (
              "Already minted"
            ) : (
              "Mint"
            )}
          </button>
        ) : (
          <ConnectWallet buttonText="Connect for mint recipe" />
        )}
        {/* for test <div>Uri: {uri?.toString()}</div> */}
      </div>
    </>
  );
};

export default FooterMint;
/* eslint-disable react/no-unescaped-entities */
import React, { useState, useEffect } from "react";
import { Node } from "reactflow";
import EmojiPicker, { EmojiClickData } from "emoji-picker-react";
import { useToast } from "@/components/ui/use-toast";
import Image from "next/image";
import { useAccount } from "wagmi";
import { ConnectWallet } from "components/Button/ConnectWallet";
import LoadingIndicator from "components/LoadingIndicator";
import {
  InformationCircleIcon,
} from '@heroicons/react/20/solid'
interface FooterDefineProps {
  nodeA: Node | undefined;
  nodeB: Node | undefined;
  footerInput: { label: string; emoji: string };
  setFooterInput: React.Dispatch<
    React.SetStateAction<{ label: string; emoji: string }>
  >;
  updateNodeFromFooter: () => void;
  isLoading: boolean;
}

const FooterDefine: React.FC<FooterDefineProps> = ({
  nodeA,
  nodeB,
  footerInput,
  setFooterInput,
  updateNodeFromFooter,
  isLoading,
}) => {
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [isButtonDisabled, setIsButtonDisabled] = useState(true);
  const [validationMessage, setValidationMessage] = useState("");
  const { toast } = useToast();
  const { isConnected } = useAccount();
  const [isHovered, setIsHovered] = useState(false);

  useEffect(() => {
    // Disable buttons by default
    let isDisabled = true;
    let message = "";

    if (footerInput.label.length === 0) {
      // Empty input does not display a message and disables the button
      message = "";
    } else if (footerInput.label.length > 30) {
      message = "The label must be within 30 characters.";
    } else if (!/^[A-Z]/.test(footerInput.label)) {
      message = "The first character must be an uppercase letter.";
    } else if (!/^[A-Z][A-Za-z0-9 ]*$/.test(footerInput.label)) {
      message = "Use only alphanumeric characters and spaces.";
    } else {
      // If all validations are passed, activate the button
      isDisabled = false;
      message = ""; // Clear if no validation message
    }

    if (message) {
      toast({
        title: "Input alert🚨",
        description: message,
      });
    }

    setIsButtonDisabled(isDisabled);
  }, [footerInput.label]);

  if (!nodeA || !nodeB) return null;

  return (
    <>
      <div className="flex items-left">
        <p className="ml-4 font-bold text-gray-400">
          Good recipe creator will be rewarded!
        </p>
        <div
          onMouseEnter={() => setIsHovered(true)}
          onMouseLeave={() => setIsHovered(false)}
          className="relative"
        >
          <InformationCircleIcon className="h-auto w-6 text-gray-400 ml-2" />
          {isHovered && (
            <div className="absolute z-30 left-full -top-48 p-4 bg-white shadow-lg rounded-lg text-sm w-[720px]">
              <p className="font-bold mb-2">Here's how you can earn points through recipe creation:</p>
              <ul className="list-disc list-inside">
                <li>Creating a Recipe: You'll earn <strong className="text-blue">200 points</strong> when you define a new recipe.</li>
                <li>Recipe Minting: Each time someone mints your recipe, you'll receive <strong className="text-blue">100 points</strong>, with no limit on the number of mints.</li>
                <li>Recipe Assistance: If your recipe is used in the creation of another recipe, and that recipe gets minted, you'll earn <strong className="text-blue">50 points</strong>.</li>
              </ul>
              <p className="mt-2">This system encourages the creation of practical and valuable recipes. Points will not be awarded for random or nonsensical recipes.</p>
            </div>
          )}
        </div>
      </div>
      <div className="left-12 bottom-0 bg-white shadow-md p-4 flex justify-between items-center z-10">
        <div className="relative flex items-center justify-center space-x-4">
          <div className="flex items-center border border-gray-100 bg-gray-100 rounded-md">
            {nodeA.data.label ? (
              <div className="p-2">
                <span className="font-bold">{`${nodeA.data.emoji}${nodeA.data.label}`}</span>
              </div>
            ) : null}
          </div>
          <span className="flex items-center">+</span>
          <div className="flex items-center border border-gray-100 bg-gray-100 rounded-md">
            {nodeB.data.label ? (
              <div className="p-2">
                <span className="font-bold">{`${nodeB.data.emoji}${nodeB.data.label}`}</span>
              </div>
            ) : null}
          </div>
        </div>
        <span className="flex items-center mx-2">=</span>

        <button className="flex items-center justify-between border border-gray-300 text-gray-400  py-2 px-2 rounded min-w-40">
          <div>
            {footerInput.emoji.length > 0 ? footerInput.emoji : "Emoji"}
          </div>

          <div className="flex-shrink-0 flex items-center">
            <Image
              src="/svg/emoji-smile.svg"
              alt="Smile emoji"
              width="20"
              height="20"
              onClick={(e) => {
                e.stopPropagation();
                setShowEmojiPicker(!showEmojiPicker);
              }}
              className="hover:fill-orange"
            />
            <Image
              src="/svg/trash.svg"
              alt="Delete emoji"
              width="20"
              height="20"
              onClick={(e) => {
                e.stopPropagation();
                setFooterInput((prev) => {
                  const emojis = prev.emoji.split(" ").filter(Boolean);
                  emojis.pop();
                  return { ...prev, emoji: emojis.join(" ") };
                });
              }}
              className="hover:fill-orange ml-2"
            />
          </div>
        </button>

        {showEmojiPicker && (
          <>
            <div
              className="fixed inset-0"
              onClick={() => setShowEmojiPicker(false)} // Close EmojiPicker when the overlay is clicked.
            ></div>
            <div className="fixed left-12 bottom-0 bg-white shadow-md p-4 flex justify-between items-center z-100">
              <EmojiPicker
                onEmojiClick={(emojiData: EmojiClickData, event: MouseEvent) => {
                  setFooterInput((prev) => {
                    const emojiCount = prev.emoji
                      .split(" ")
                      .filter(Boolean).length;

                    if (emojiCount < 3) {
                      const newEmoji =
                        prev.emoji + (prev.emoji ? " " : "") + emojiData.emoji;
                      return { ...prev, emoji: newEmoji };
                    } else {
                      toast({
                        title: "Input alert🚨",
                        description: "Maximum of 3 emojis",
                      });
                      return prev;
                    }
                  });
                  setShowEmojiPicker(false);
                }}
                autoFocusSearch={false}
              />
            </div>
          </>
        )}

        <input
          type="text"
          name="label"
          placeholder="Label"
          value={footerInput.label}
          onChange={(e) =>
            setFooterInput((prev) => ({ ...prev, label: e.target.value }))
          }
          onMouseDown={(e) => e.stopPropagation()}
          className="border border-gray-300 rounded-md p-2 m-1 flex-1"
        />
        {isConnected ? (
          <button
            onClick={updateNodeFromFooter}
            disabled={isButtonDisabled}
            className={`${
              isButtonDisabled
                ? "bg-gray-400 hover:bg-gray-400 cursor-not-allowed"
                : "bg-blue hover:bg-blueHover"
            } text-white font-bold py-2 px-4 rounded m-1`}
          >
            {isLoading ? (
              <LoadingIndicator />
            ) : "Define"}
          </button>
        ) : (
          <ConnectWallet />
        )}
      </div>
    </>
  );
};

export default FooterDefine;
import { ConnectKitButton } from "connectkit";

import styled from "styled-components";
const StyledButton = styled.button`
  cursor: pointer;
  position: relative;
  display: inline-block;
  padding: 8px 16px;
  color: #ffffff;
  background: #1652F0;
  font-size: 16px;
  font-weight: 500;
  border-radius: 0.5rem;
  box-shadow: 0 4px 24px -6px #1652F0;

  transition: 200ms ease;
  &:hover {
    transform: translateY(-6px);
    box-shadow: 0 6px 40px -6px #1652F0;
  }
  &:active {
    transform: translateY(-3px);
    box-shadow: 0 6px 32px -6px #1652F0;
  }
`;

export const ConnectWallet = ({ buttonText = "Connect Wallet" }) => {
  return (
    <ConnectKitButton.Custom>
      {({ isConnected, show, truncatedAddress, ensName }) => {
        return (
          <StyledButton onClick={show}>
            {isConnected ? ensName ?? truncatedAddress : buttonText}
          </StyledButton>
        );
      }}
    </ConnectKitButton.Custom>
  );
};
import React, { useState, useEffect } from "react";
import { Node } from "reactflow";
import { ConnectWallet } from "components/Button/ConnectWallet";
import { useAccount, useReadContracts } from "wagmi";
import { ZetaRecipeAbi } from "constants/ZetaRecipeAbi";
import { ZetaTokenAbi } from "constants/ZetaTokenAbi";
import { addresses } from "constants/addresses";

let tapSound: any = null;
if (typeof window !== "undefined") {
  tapSound = new Audio("/se/tap.mp3");
}

interface SidebarProps {
  sideNodes: Node[];
}

const Sidebar: React.FC<SidebarProps> = ({ sideNodes: sideNodes }) => {
  const { address, isConnected } = useAccount();
  const [showDetails, setShowDetails] = useState(false);

  const onDragStart = (
    event: React.DragEvent<HTMLDivElement>,
    nodeType: string
  ) => {
    event.dataTransfer.setData("application/reactflow", nodeType);
    event.dataTransfer.effectAllowed = "move";
    tapSound
      .play()
      .catch((err: Error) => console.error("Audio play failed:", err));
  };

  const ZetaTokenContract = {
    address: addresses.ZetaToken as `0x${string}`,
    abi: ZetaTokenAbi,
  } as const;

  const ZetaRecipeContract = {
    address: addresses.ZetaRecipe as `0x${string}`,
    abi: ZetaRecipeAbi,
  } as const;

  const results = useReadContracts({
    contracts: [
      {
        ...ZetaTokenContract,
        functionName: "mintPoints",
        args: [address as `0x${string}`],
      },
      {
        ...ZetaRecipeContract,
        functionName: "recipePoints",
        args: [address as `0x${string}`],
      },
      {
        ...ZetaTokenContract,
        functionName: "recipeCreatorPoints",
        args: [address as `0x${string}`],
      },
      {
        ...ZetaTokenContract,
        functionName: "refferalRecipeCreatorPoints",
        args: [address as `0x${string}`],
      },
    ],
  });

  // Calculate total points
  const totalPoints = results.isSuccess ? results.data.reduce((total, current) => {
    const points = Number(current.result?.toString()) || 0;
    return total + points;
  }, 0) : 0;

  const maxHeight = 'calc(100vh - 160px)';

  return (
    <div className="w-[400px] border-l border-gray-400">
      <div className="shadow-custom px-2 flex flex-col justify-between min-h-screen">
        <div className="relative flex items-center justify-between p-2 border-b border-gray-200">
          <button
            className="px-4 py-2 bg-white text-blue border border-blue rounded-xl mr-4 hover:bg-blue hover:text-white"
            onClick={() => setShowDetails(!showDetails)}
          >
            Points
          </button>
          {showDetails && (
            <div className="absolute top-full w-full p-6 rounded-lg shadow-lg border border-gray-200 z-50 bg-white">
              <span className="text-lg font-semibold text-gray-800">Your points</span>
              <p className="text-2xl font-bold text-gray-900 py-4 border-b border-gray-200">
                {totalPoints.toLocaleString()} points
              </p>
              <div className="mt-6 space-y-2">
                {results.isSuccess && (
                  <>
                    <div className="flex items-center text-gray-700">
                      <span className="inline-block w-4 h-4 mr-2 rounded-full bg-green-500"></span>
                      Object minted {results.data[0].result?.toString() || 0}
                    </div>
                    <div className="flex items-center text-gray-700">
                      <span className="inline-block w-4 h-4 mr-2 rounded-full bg-yellow-500"></span>
                      Recipe Created {results.data[1].result?.toString() || 0}
                    </div>
                    <div className="flex items-center text-gray-700">
                      <span className="inline-block w-4 h-4 mr-2 rounded-full bg-purple-500"></span>
                      Your recipe minted {results.data[2].result?.toString() || 0}
                    </div>
                    <div className="flex items-center text-gray-700">
                      <span className="inline-block w-4 h-4 mr-2 rounded-full bg-red-500"></span>
                      Your recipe assist {results.data[3].result?.toString() || 0}
                    </div>
                  </>
                
                )}
              </div>
            </div>
          )}

          <ConnectWallet />
        </div>
        <div className="mt-4 flex-grow" style={{ overflowY: 'auto', maxHeight: maxHeight }}>
          <div className="flex flex-wrap">
            {sideNodes.map((node, i) => (
              <div
                key={node.id}
                className="relative border border-gray-300 bg-white p-2 m-1 rounded-md overflow-hidden hover:bg-gradient-to-b"
                onDragStart={(event) => onDragStart(event, node.data.craft_id)}
                draggable
              >
                <span className="font-bold mr-1">{node.data.emoji}</span>
                <span className="font-bold">{node.data.label}</span>
              </div>
            ))}
          </div>
        </div>
        <div className="p-4 text-center border-t border-gray-200 flex items-center justify-center h-12">
          <ul className="flex flex-wrap items-center mt-3 text-sm  text-gray-400 sm:mt-0">
            <li>
              <a
                target="_blank"
                href="https://twitter.com/0xbaratie"
                className="hover:underline me-4 md:me-6"
              >
                X
              </a>
            </li>
            <li>
              <a
                target="_blank"
                href="https://github.com/0xbaratie/ZetaCraft"
                className="hover:underline me-4 md:me-6"
              >
                Github
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default Sidebar;
import React from 'react';

const LoadingIndicator: React.FC = () => {
    return (
        <>
            <svg aria-hidden="true" className="inline mr-3 w-4 h-4 text-white animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="#E5E7EB"></path>
                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentColor"></path>
            </svg>
            Loading...
        </>
    );
};

export default LoadingIndicator;
import { useCallback, useState, useRef, useEffect } from "react";
import ReactFlow, {
  Node,
  useNodesState,
  useEdgesState,
  addEdge,
  Connection,
  Edge,
  ConnectionLineType,
  Controls,
  Background,
} from "reactflow";
import FooterDefine from "components/Footer/FooterDefine";
import FooterMint from "components/Footer/FooterMint";
import Sidebar from "components/Sidebar";
import CustomNode from "./CustomNode";
import {
  orderIds,
  getCraftApi,
  postCraftApi,
  getRecipeApi,
  postRecipeApi,
} from "utils/utils";
import {
  defaultSideNodes,
  defaultNodeMap,
  defaultRecipeMap,
} from "utils/defaultObject";
import { useWriteContract, useWaitForTransactionReceipt } from "wagmi";
import { ZetaRecipeAbi } from "constants/ZetaRecipeAbi";
import { addresses } from "constants/addresses";
import { toast } from "sonner";

let fusionSound: any = null;
if (typeof window !== "undefined") {
  fusionSound = new Audio("/se/new-discover.mp3");
}

let flow_id = 1;
let nodeMap: { [key: string]: Node } = defaultNodeMap;
const recipeMap: { [key: string]: string } = defaultRecipeMap;

const Flow: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([
    { id: "e1-2", source: "1", target: "2" },
    { id: "e1-3", source: "1", target: "3" },
  ]);
  const [reactFlowInstance, setReactFlowInstance] = useState<any>(null);
  const [isFooterDefineVisible, setIsFooterDefineVisible] = useState(true);
  const [isFooterMintVisible, setIsFooterMintVisible] = useState(false);
  const [footerNode, setFooterNode] = useState<Node | undefined>();
  const [footerNodeA, setFooterNodeA] = useState<Node | undefined>();
  const [footerNodeB, setFooterNodeB] = useState<Node | undefined>();
  const [footerInput, setFooterInput] = useState({ emoji: "", label: "" });
  const [sideNodes, setSideNodes] = useState<Node[]>([]);
  const { data: hash, isPending,  writeContract } = useWriteContract();
  const { isLoading: isConfirming, isSuccess: isConfirmed } = 
    useWaitForTransactionReceipt({ 
      hash, 
    }) 

  const addSideNode = (node: Node) => {
    //if already exists, don't add
    if (sideNodes.find((n) => n.data.craft_id === node.data.craft_id)) {
      return;
    }
    setSideNodes((currentNodes) => currentNodes.concat(node));
  };

  const getMaxCraftId = async (): Promise<number> => {
    const res = await fetch("/api/keys");
    const data = await res.json();
    //TODO
    const initialNodeCount = 600;
    return data.length + initialNodeCount;
  };

  //recipe
  const getRecipeMap = (idA: string, idB: string): string => {
    // align a and b to be in ascending order
    [idA, idB] = orderIds(idA, idB);
    return recipeMap[`${idA}_${idB}`];
  };

  const getRecipeMapByApi = async (
    idA: string,
    idB: string
  ): Promise<string> => {
    [idA, idB] = orderIds(idA, idB);
    const res = await getRecipeApi(`${idA}_${idB}`);
    if (!res) {
      return "";
    }
    return res.craft_id;
  };

  //craft
  const getNodeMap = (id: string): Node => {
    return nodeMap[id];
  };

  const getNodeMapByApi = async (id: string): Promise<Node> => {
    const res = await getCraftApi(id);
    return {
      id: "",
      type: "custom",
      data: { craft_id: res.craft_id, emoji: res.emoji, label: res.label },
      position: { x: 0, y: 0 },
    };
  };

  const addNodeMap = async (craft_id: string, emoji: string, label: string) => {
    nodeMap[craft_id] = {
      id: "",
      type: "custom",
      data: { craft_id: craft_id, emoji: emoji, label: label },
      position: { x: 0, y: 0 },
    };
    await postCraftApi(craft_id, footerInput.emoji, footerInput.label);
  };

  //footer function
  const updateNodeFromFooter = async () => {
    if (!footerNodeA || !footerNodeB) {
      return;
    }

    const position = {
      x: (footerNodeA.position.x + footerNodeB.position.x) / 2,
      y: (footerNodeA.position.y + footerNodeB.position.y) / 2,
    };

    const new_craft_id = (await getMaxCraftId()) + 1 + "";
    console.log("new_craft_id", new_craft_id);
    const [craft_idA, craft_idB] = orderIds(
      footerNodeA.data.craft_id,
      footerNodeB.data.craft_id
    );

    // add Contract
    writeContract(
      {
        address: addresses.ZetaRecipe as `0x${string}`,
        abi: ZetaRecipeAbi,
        functionName: "setRecipe",
        args: [
          BigInt(new_craft_id),
          footerInput.label,
          `${footerInput.emoji} ${footerInput.label}`,
          BigInt(craft_idA),
          BigInt(craft_idB),
        ],
      },
      {
        onSuccess(data, variables, context) {
          // add KV and local storage
          addNodeMap(new_craft_id, footerInput.emoji, footerInput.label);
          recipeMap[`${craft_idA}_${craft_idB}`] = new_craft_id; //add recipeMap
          postRecipeApi(`${craft_idA}_${craft_idB}`, new_craft_id);

          const newNode: Node = {
            id: `${flow_id++}`,
            type: "custom",
            data: {
              craft_id: new_craft_id,
              emoji: footerInput.emoji,
              label: footerInput.label,
            },
            position: position,
          };

          // unite footerNodeA and footerNodeB into new node
          setNodes((currentNodes) =>
            currentNodes
              .filter((n) => n.id !== footerNodeA.id && n.id !== footerNodeB.id)
              .concat(newNode)
          );

          addSideNode({
            ...newNode,
            id: "",
            position: { x: 0, y: 0 },
          });

          toast("New recipe has been defined!", {
            action: {
              label: "Share on X",
              onClick: () => {
                const shareText = encodeURIComponent(
                  `I defined a new recipe for Zeta Craft.\nThe recipe count reached ${new_craft_id}. @0xBaratie @nealagarwal\nhttps://Zetacraft.vercel.app/`
                );
                const hashtags = encodeURIComponent("Zetacraft,buildonbase");
                const related = encodeURIComponent("twitterapi,twitter");
                const url = `https://twitter.com/intent/tweet?text=${shareText}&hashtags=${hashtags}&related=${related}`;
                const newWindow = window.open(url, "_blank");
                newWindow?.focus();
              },
            },
          });

          setIsFooterDefineVisible(false);
          setIsFooterMintVisible(true);
          setFooterNode(newNode);
          // setFooterNodeA(undefined);
          // setFooterNodeB(undefined);
          fusionSound
            .play()
            .catch((err: Error) => console.error("Audio play failed:", err));
        },
      }
    );
  };

  //flow functions
  const onConnect = useCallback(
    (params: Connection | Edge) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  const onDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
  }, []);

  const onDrop = useCallback(
    async (event: React.DragEvent<HTMLDivElement>) => {
      event.preventDefault();

      const reactFlowBounds = event.currentTarget.getBoundingClientRect();
      const id = event.dataTransfer.getData("application/reactflow");

      if (typeof id === "undefined" || !id) {
        // TODO message.warning("Node type not found!");
        return;
      }

      const position = reactFlowInstance.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      let baseNode = getNodeMap(id);
      if (!baseNode) {
        baseNode = await getNodeMapByApi(id);
      }
      if (!baseNode) {
        // message.warning("Node type not found!"); //TODO
        return;
      }

      const newNode: Node = {
        ...baseNode,
        id: `${flow_id++}`,
        position: position,
      };

      setNodes((currentNodes) => {
        const updatedNodes = currentNodes.concat(newNode);
        return updatedNodes;
      });
    },
    [reactFlowInstance, setNodes]
  );

  const nodesOverlap = (nodeA: Node, nodeB: Node): boolean => {
    const buffer = 50; // A buffer to account for node size; adjust as needed
    return (
      Math.abs(nodeA.position.x - nodeB.position.x) < buffer &&
      Math.abs(nodeA.position.y - nodeB.position.y) < buffer
    );
  };

  const checkNodesOverlap = (nodes: Node[]) => {
    for (let i = 0; i < nodes.length; i++) {
      for (let j = i + 1; j < nodes.length; j++) {
        if (nodesOverlap(nodes[i], nodes[j])) {
          return false;
        }
      }
    }
    return true;
  };

  const onNodeDrag = async (event: React.MouseEvent, node: Node) => {
    setIsFooterDefineVisible(false);
    setIsFooterMintVisible(false);
  };

  const onNodeDragStop = async (event: React.MouseEvent, node: Node) => {
    // Find if the dragged node overlaps with any other node
    const overlappingNode = nodes.find(
      (n) => n.id !== node.id && nodesOverlap(n, node)
    );

    if (checkNodesOverlap(nodes)) {
      setIsFooterDefineVisible(false);
    }

    if (overlappingNode) {
      // get new craft_id by getRecipeId
      let newCraftId = getRecipeMap(
        node.data.craft_id,
        overlappingNode.data.craft_id
      );
      // console.log("newCraftId by getRecipeMap", newCraftId);
      if (!newCraftId) {
        newCraftId = await getRecipeMapByApi(
          node.data.craft_id,
          overlappingNode.data.craft_id
        );
        // console.log("newCraftId by getRecipeMapByApi", newCraftId);
      }
      // console.log("newCraftId", newCraftId);

      // recipe exists
      if (newCraftId) {
        // if node exists in local storage
        let _newNode = getNodeMap(newCraftId);
        if (!_newNode) {
          _newNode = await getNodeMapByApi(newCraftId);
        }
        if (!_newNode) {
          // message.warning("Node type not found!"); //TODO
          return;
        }

        const newNode: Node = {
          ..._newNode,
          id: `${flow_id++}`,
          position: {
            x: (node.position.x + overlappingNode.position.x) / 2,
            y: (node.position.y + overlappingNode.position.y) / 2,
          },
        };

        // Remove the original nodes and add the new node
        setNodes((currentNodes) =>
          currentNodes
            .filter((n) => n.id !== node.id && n.id !== overlappingNode.id)
            .concat(newNode)
        );

        addSideNode({
          ..._newNode,
          id: "",
          position: { x: 0, y: 0 },
        });

        setIsFooterDefineVisible(false);
        setIsFooterMintVisible(true);
        setFooterNode(_newNode);
        setFooterNodeA(node);
        setFooterNodeB(overlappingNode);
        fusionSound
          .play()
          .catch((err: Error) => console.error("Audio play failed:", err));

        //mint new recipe by footer
      } else {
        console.log("recipe not exists");
        setIsFooterMintVisible(false);
        setIsFooterDefineVisible(true);
        setFooterNodeA(node);
        setFooterNodeB(overlappingNode);
      }
    }
  };

  //flow settings
  const reactFlowWrapper = useRef<any>(null);
  const nodeTypes = {
    custom: CustomNode,
  };
  const defaultEdgeOptions = {
    animated: true,
    type: "smoothstep",
  };

  useEffect(() => {
    const storedSideNodes = localStorage.getItem('sideNodes');
    if (storedSideNodes !== null) {
      const parsedSideNodes = JSON.parse(storedSideNodes);
      // Verify that parsedSideNodes is an array and its length is greater than zero
      if (Array.isArray(parsedSideNodes) && parsedSideNodes.length > 0) {
        setSideNodes(parsedSideNodes);
      }
    } else {
      // If no sideNodes exist in localStorage.
      setSideNodes(defaultSideNodes);
    }
  }, []);
  

  useEffect(() => {
    // Save to localStorage when sideNodes are updated.
    localStorage.setItem('sideNodes', JSON.stringify(sideNodes));
  }, [sideNodes]);

  return (
    <div className="flex flex-row flex-grow">
      <div className="flex flex-col h-screen w-full">
        <div className="flex-grow h-full w-full" ref={reactFlowWrapper}>
          <ReactFlow
            nodes={nodes}
            onNodeDragStart={onNodeDrag}
            onNodeDragStop={onNodeDragStop}
            onNodesChange={onNodesChange}
            edges={edges}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
            nodeTypes={nodeTypes}
            defaultEdgeOptions={defaultEdgeOptions}
            connectionLineType={ConnectionLineType.SmoothStep}
            fitView
          >
            <Controls />
            <Background />
          </ReactFlow>
        </div>
        {isFooterDefineVisible && (
          <FooterDefine
            nodeA={footerNodeA}
            nodeB={footerNodeB}
            footerInput={footerInput}
            setFooterInput={setFooterInput}
            updateNodeFromFooter={updateNodeFromFooter}
            isLoading={isPending || isConfirming}
          />
        )}
        {isFooterMintVisible && (
          <FooterMint
            node={footerNode}
            nodeA={footerNodeA}
            nodeB={footerNodeB}
          />
        )}
      </div>
      <Sidebar sideNodes={sideNodes} />
    </div>
  );
};

export default Flow;
import { memo, FC, CSSProperties } from "react";
import { Handle, Position, NodeProps, NodeResizer } from "reactflow";

const sourceHandleStyleA: CSSProperties = { left: 50 };
const sourceHandleStyleB: CSSProperties = {
  right: 50,
  left: "auto",
};

const CustomNode: FC<NodeProps> = ({ data, xPos, yPos }) => {
  return (
    <>
      <div
        className="border border-gray-300 bg-white px-2 py-1 m-1 rounded-md overflow-hidden hover:bg-gradient-to-b"
      >
        <span className="font-semibold mr-1">{data.emoji}</span>
        <span className="font-semibold">{data.label}</span>
      </div>
    </>
  );
};

export default memo(CustomNode);
import type { NextPage } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";

import Flow from "components/Flow";
import { ReactFlowProvider } from "react-flow-renderer";
import Sidebar from "components/Sidebar";
import { Toaster } from "@/components/ui/toaster"
import { Toaster as ToasterSonner } from "@/components/ui/sonner"

import { Node } from "reactflow";

const Home: NextPage = () => {
  const [isMobile, setIsMobile] = useState<boolean>(false);

  useEffect(() => {
    // Run this effect once on mount
    const handleResize = () => {
      // Consider "mobile" if width is less than or equal to 768 pixels
      setIsMobile(window.innerWidth <= 768);
    };

    // Check once on mount
    handleResize();

    // Optionally listen for resize events if you want to dynamically change the view
    window.addEventListener('resize', handleResize);

    // Cleanup the event listener on component unmount
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  return (
    <div className="flex flex-col h-screen">
      <Head>
      <title>Zeta Craft</title>
        <meta property='og:title' content='Zeta Craft - Generate infinite recipe and earn points' />
        <meta
          property='og:description'
          content='Zeta Craft  is a Fully on chain UGC game you can create new recipes by mixing recipes with recipes.'
        />
        <meta property='og:image' content='/ogp.png' />
        <link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
        <link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
        <link rel='apple-touch-icon' sizes='200x200' href='/apple-touch-icon.png' />
        <meta name='twitter:card' content='summary_large_image' />
        <meta name='twitter:title' content='Zeta Craft - Generate infinite recipe and earn points' />
        <meta
          name='twitter:description'
          content='Zeta Craft  is a Fully on chain UGC game you can create new recipes by mixing recipes with recipes.'
        />
        <meta
          name='twitter:image'
          content='https://Zetacraft.vercel.app/ogp.png'
        />
      </Head>
      <div className="flex flex-grow">
        <ReactFlowProvider>
        {!isMobile ? (
            <Flow />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <span>Unavailable on mobile</span>
            </div>
          )}
          <Toaster />
        </ReactFlowProvider>
        <ToasterSonner position="top-center" />
      </div>
    </div>
  );
};

export default Home;
import type { AppProps } from "next/app";
import "../styles/globals.css";
import "reactflow/dist/style.css";
import { WagmiProvider, createConfig, http } from "wagmi";
import { baseSepolia, base } from "wagmi/chains";
import { QueryClientProvider, QueryClient } from "@tanstack/react-query";
import { ConnectKitProvider, getDefaultConfig } from "connectkit";
import { GoogleAnalytics } from "@next/third-parties/google";

const config = createConfig(
  getDefaultConfig({
    // Your dApps chains
    chains: [base],
    transports: {
      [base.id]: http(base.rpcUrls.default.http[0]),
    },
    // Required API Keys
    walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID!,

    ssr: true,

    // Required App Info
    appName: "Your App Name",

    // Optional App Info
    appDescription: "Your App Description",
    appUrl: "https://family.co", // your app's url
    appIcon: "https://family.co/logo.png", // your app's icon, no bigger than 1024x1024px (max. 1MB)
  })
);

const queryClient = new QueryClient();
function MyApp({ Component, pageProps }: AppProps) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <ConnectKitProvider>
          <Component {...pageProps} />
          <GoogleAnalytics
            gaId={process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID || ""}
          />
        </ConnectKitProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
}

export default MyApp;
import { kv } from "@vercel/kv";
import { NextApiRequest, NextApiResponse } from "next";

export default async function handler(
  request: NextApiRequest,
  response: NextApiResponse
) {
  await kv.flushall();
  return response.status(200).json({ message: "flushall" });
}
import { kv } from "@vercel/kv";
import { NextApiRequest, NextApiResponse } from "next";

export default async function handler(
  request: NextApiRequest,
  response: NextApiResponse
) {
  if (request.method === "POST") {
    console.log("req.body", request.body);
    const recipe_id: string = request.body.recipe_id;
    const craft_id: string = request.body.craft_id;

    await kv.hset(recipe_id, { craft_id: craft_id });
    return response.status(200).json({ craft_id });
  } else {
    const recipe_id: string = request.query["recipe_id"] as string;
    const data = await kv.hgetall(recipe_id);
    return response.status(200).json(data);
  }
}
import { kv } from "@vercel/kv";
import { NextApiRequest, NextApiResponse } from "next";

export default async function handler(
  request: NextApiRequest,
  response: NextApiResponse
) {
  const data = await kv.keys("*"); // Get all data
  return response.status(200).json(data);
}
import { kv } from "@vercel/kv";
import { NextApiRequest, NextApiResponse } from "next";

export default async function handler(
  request: NextApiRequest,
  response: NextApiResponse
) {
  if (request.method === "POST") {
    console.log("req.body", request.body);
    const craft_id: string = request.body.craft_id;
    const emoji: string = request.body.emoji;
    const label: string = request.body.label;

    await kv.hset(craft_id, { craft_id: craft_id, emoji: emoji, label: label });
    return response.status(200).json({ craft_id, emoji, label });
  } else {
    const craft_id: string = request.query["craft_id"] as string;
    const data = await kv.hgetall(craft_id);
    return response.status(200).json(data);
  }
}
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()
  // TODO: Production exploer URL
  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>
                  {typeof description === 'string' &&
                  description.startsWith('0x') ? (
                    <a
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 underline break-all"
                      href={`https://basescan.org/tx/${description}`}
                    >
                      {description}
                    </a>
                  ) : (
                    <span className="break-all">{description}</span>
                  )}
                </ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
